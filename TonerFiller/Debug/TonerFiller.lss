
TonerFiller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800200  000020c8  0000215c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080036e  0080036e  000022ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000453e  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000749  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e75  00000000  00000000  00007191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000058c  00000000  00000000  00009008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fb  00000000  00000000  00009594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001acf  00000000  00000000  00009c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000b75e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__vector_17>
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_42>
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ec       	ldi	r30, 0xC8	; 200
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 36       	cpi	r26, 0x6E	; 110
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	ae e6       	ldi	r26, 0x6E	; 110
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 33       	cpi	r26, 0x33	; 51
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <main>
     122:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <X_Axis_Step_Plus_Init>:
			Y_Axis_Step_Minus();
			//_delay_ms(500);
		}
		Lcd4_Clear();
		Lcd4_Set_Cursor(1,0);
		Lcd4_Write_String("Zero Set");
     128:	89 e0       	ldi	r24, 0x09	; 9
     12a:	80 93 81 00 	sts	0x0081, r24
     12e:	88 ef       	ldi	r24, 0xF8	; 248
     130:	80 93 91 00 	sts	0x0091, r24
     134:	78 94       	sei
     136:	88 9a       	sbi	0x11, 0	; 17
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	88 ef       	ldi	r24, 0xF8	; 248
     13c:	95 e1       	ldi	r25, 0x15	; 21
     13e:	21 50       	subi	r18, 0x01	; 1
     140:	80 40       	sbci	r24, 0x00	; 0
     142:	90 40       	sbci	r25, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <X_Axis_Step_Plus_Init+0x16>
     146:	00 c0       	rjmp	.+0      	; 0x148 <X_Axis_Step_Plus_Init+0x20>
     148:	00 00       	nop
     14a:	f8 94       	cli
     14c:	08 95       	ret

0000014e <Y_Axis_Step_Plus_Init>:
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	80 93 91 00 	sts	0x0091, r24
     154:	88 ef       	ldi	r24, 0xF8	; 248
     156:	80 93 81 00 	sts	0x0081, r24
     15a:	78 94       	sei
     15c:	8a 9a       	sbi	0x11, 2	; 17
     15e:	2f e7       	ldi	r18, 0x7F	; 127
     160:	8a ee       	ldi	r24, 0xEA	; 234
     162:	9d e0       	ldi	r25, 0x0D	; 13
     164:	21 50       	subi	r18, 0x01	; 1
     166:	80 40       	sbci	r24, 0x00	; 0
     168:	90 40       	sbci	r25, 0x00	; 0
     16a:	e1 f7       	brne	.-8      	; 0x164 <Y_Axis_Step_Plus_Init+0x16>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <Y_Axis_Step_Plus_Init+0x20>
     16e:	00 00       	nop
     170:	f8 94       	cli
     172:	08 95       	ret

00000174 <X_Axis_Step_Plus>:
     174:	89 e0       	ldi	r24, 0x09	; 9
     176:	80 93 81 00 	sts	0x0081, r24
     17a:	88 ef       	ldi	r24, 0xF8	; 248
     17c:	80 93 91 00 	sts	0x0091, r24
     180:	78 94       	sei
     182:	88 9a       	sbi	0x11, 0	; 17
     184:	2f e7       	ldi	r18, 0x7F	; 127
     186:	87 ed       	ldi	r24, 0xD7	; 215
     188:	95 e2       	ldi	r25, 0x25	; 37
     18a:	21 50       	subi	r18, 0x01	; 1
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	90 40       	sbci	r25, 0x00	; 0
     190:	e1 f7       	brne	.-8      	; 0x18a <X_Axis_Step_Plus+0x16>
     192:	00 c0       	rjmp	.+0      	; 0x194 <X_Axis_Step_Plus+0x20>
     194:	00 00       	nop
     196:	80 91 70 03 	lds	r24, 0x0370
     19a:	90 91 71 03 	lds	r25, 0x0371
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	90 93 71 03 	sts	0x0371, r25
     1a4:	80 93 70 03 	sts	0x0370, r24
     1a8:	f8 94       	cli
     1aa:	08 95       	ret

000001ac <X_Axis_Step_Minus>:
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	80 93 81 00 	sts	0x0081, r24
     1b2:	88 ef       	ldi	r24, 0xF8	; 248
     1b4:	80 93 91 00 	sts	0x0091, r24
     1b8:	78 94       	sei
     1ba:	88 98       	cbi	0x11, 0	; 17
     1bc:	2f e7       	ldi	r18, 0x7F	; 127
     1be:	87 ed       	ldi	r24, 0xD7	; 215
     1c0:	95 e2       	ldi	r25, 0x25	; 37
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	80 40       	sbci	r24, 0x00	; 0
     1c6:	90 40       	sbci	r25, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <X_Axis_Step_Minus+0x16>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <X_Axis_Step_Minus+0x20>
     1cc:	00 00       	nop
     1ce:	80 91 70 03 	lds	r24, 0x0370
     1d2:	90 91 71 03 	lds	r25, 0x0371
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	90 93 71 03 	sts	0x0371, r25
     1dc:	80 93 70 03 	sts	0x0370, r24
     1e0:	f8 94       	cli
     1e2:	08 95       	ret

000001e4 <Y_Axis_Step_Plus>:
     1e4:	8a e0       	ldi	r24, 0x0A	; 10
     1e6:	80 93 91 00 	sts	0x0091, r24
     1ea:	88 ef       	ldi	r24, 0xF8	; 248
     1ec:	80 93 81 00 	sts	0x0081, r24
     1f0:	78 94       	sei
     1f2:	8a 9a       	sbi	0x11, 2	; 17
     1f4:	2f e7       	ldi	r18, 0x7F	; 127
     1f6:	81 e3       	ldi	r24, 0x31	; 49
     1f8:	97 e1       	ldi	r25, 0x17	; 23
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <Y_Axis_Step_Plus+0x16>
     202:	00 c0       	rjmp	.+0      	; 0x204 <Y_Axis_Step_Plus+0x20>
     204:	00 00       	nop
     206:	80 91 6e 03 	lds	r24, 0x036E
     20a:	90 91 6f 03 	lds	r25, 0x036F
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	90 93 6f 03 	sts	0x036F, r25
     214:	80 93 6e 03 	sts	0x036E, r24
     218:	f8 94       	cli
     21a:	08 95       	ret

0000021c <Y_Axis_Step_Minus>:
     21c:	8a e0       	ldi	r24, 0x0A	; 10
     21e:	80 93 91 00 	sts	0x0091, r24
     222:	88 ef       	ldi	r24, 0xF8	; 248
     224:	80 93 81 00 	sts	0x0081, r24
     228:	78 94       	sei
     22a:	8a 98       	cbi	0x11, 2	; 17
     22c:	2f e7       	ldi	r18, 0x7F	; 127
     22e:	81 e3       	ldi	r24, 0x31	; 49
     230:	97 e1       	ldi	r25, 0x17	; 23
     232:	21 50       	subi	r18, 0x01	; 1
     234:	80 40       	sbci	r24, 0x00	; 0
     236:	90 40       	sbci	r25, 0x00	; 0
     238:	e1 f7       	brne	.-8      	; 0x232 <Y_Axis_Step_Minus+0x16>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <Y_Axis_Step_Minus+0x20>
     23c:	00 00       	nop
     23e:	80 91 6e 03 	lds	r24, 0x036E
     242:	90 91 6f 03 	lds	r25, 0x036F
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	90 93 6f 03 	sts	0x036F, r25
     24c:	80 93 6e 03 	sts	0x036E, r24
     250:	f8 94       	cli
     252:	08 95       	ret

00000254 <Go_To_Zero_Init>:
     254:	80 91 ec 03 	lds	r24, 0x03EC
     258:	90 91 ed 03 	lds	r25, 0x03ED
     25c:	89 2b       	or	r24, r25
     25e:	39 f4       	brne	.+14     	; 0x26e <Go_To_Zero_Init+0x1a>
     260:	a5 df       	rcall	.-182    	; 0x1ac <X_Axis_Step_Minus>
     262:	80 91 ec 03 	lds	r24, 0x03EC
     266:	90 91 ed 03 	lds	r25, 0x03ED
     26a:	89 2b       	or	r24, r25
     26c:	c9 f3       	breq	.-14     	; 0x260 <Go_To_Zero_Init+0xc>
     26e:	5c df       	rcall	.-328    	; 0x128 <X_Axis_Step_Plus_Init>
     270:	10 92 ed 03 	sts	0x03ED, r1
     274:	10 92 ec 03 	sts	0x03EC, r1
     278:	80 91 ea 03 	lds	r24, 0x03EA
     27c:	90 91 eb 03 	lds	r25, 0x03EB
     280:	89 2b       	or	r24, r25
     282:	39 f4       	brne	.+14     	; 0x292 <Go_To_Zero_Init+0x3e>
     284:	cb df       	rcall	.-106    	; 0x21c <Y_Axis_Step_Minus>
     286:	80 91 ea 03 	lds	r24, 0x03EA
     28a:	90 91 eb 03 	lds	r25, 0x03EB
     28e:	89 2b       	or	r24, r25
     290:	c9 f3       	breq	.-14     	; 0x284 <Go_To_Zero_Init+0x30>
     292:	5d df       	rcall	.-326    	; 0x14e <Y_Axis_Step_Plus_Init>
     294:	10 92 eb 03 	sts	0x03EB, r1
     298:	10 92 ea 03 	sts	0x03EA, r1
     29c:	08 95       	ret

0000029e <X_Axis_Big_Step_Plus>:
     29e:	89 e0       	ldi	r24, 0x09	; 9
     2a0:	80 93 81 00 	sts	0x0081, r24
     2a4:	88 ef       	ldi	r24, 0xF8	; 248
     2a6:	80 93 91 00 	sts	0x0091, r24
     2aa:	78 94       	sei
     2ac:	88 9a       	sbi	0x11, 0	; 17
     2ae:	2f ef       	ldi	r18, 0xFF	; 255
     2b0:	8d e2       	ldi	r24, 0x2D	; 45
     2b2:	92 e2       	ldi	r25, 0x22	; 34
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	80 40       	sbci	r24, 0x00	; 0
     2b8:	90 40       	sbci	r25, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <X_Axis_Big_Step_Plus+0x16>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <X_Axis_Big_Step_Plus+0x20>
     2be:	00 00       	nop
     2c0:	80 91 70 03 	lds	r24, 0x0370
     2c4:	90 91 71 03 	lds	r25, 0x0371
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 71 03 	sts	0x0371, r25
     2ce:	80 93 70 03 	sts	0x0370, r24
     2d2:	f8 94       	cli
     2d4:	08 95       	ret

000002d6 <X_Axis_Big_Step_Minus>:
     2d6:	89 e0       	ldi	r24, 0x09	; 9
     2d8:	80 93 81 00 	sts	0x0081, r24
     2dc:	88 ef       	ldi	r24, 0xF8	; 248
     2de:	80 93 91 00 	sts	0x0091, r24
     2e2:	78 94       	sei
     2e4:	88 98       	cbi	0x11, 0	; 17
     2e6:	2f ef       	ldi	r18, 0xFF	; 255
     2e8:	8d e2       	ldi	r24, 0x2D	; 45
     2ea:	92 e2       	ldi	r25, 0x22	; 34
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	80 40       	sbci	r24, 0x00	; 0
     2f0:	90 40       	sbci	r25, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <X_Axis_Big_Step_Minus+0x16>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <X_Axis_Big_Step_Minus+0x20>
     2f6:	00 00       	nop
     2f8:	80 91 70 03 	lds	r24, 0x0370
     2fc:	90 91 71 03 	lds	r25, 0x0371
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	90 93 71 03 	sts	0x0371, r25
     306:	80 93 70 03 	sts	0x0370, r24
     30a:	f8 94       	cli
     30c:	08 95       	ret

0000030e <Y_Axis_Big_Step_Plus>:
     30e:	8a e0       	ldi	r24, 0x0A	; 10
     310:	80 93 91 00 	sts	0x0091, r24
     314:	88 ef       	ldi	r24, 0xF8	; 248
     316:	80 93 81 00 	sts	0x0081, r24
     31a:	78 94       	sei
     31c:	8a 9a       	sbi	0x11, 2	; 17
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	8e e9       	ldi	r24, 0x9E	; 158
     322:	94 e2       	ldi	r25, 0x24	; 36
     324:	21 50       	subi	r18, 0x01	; 1
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <Y_Axis_Big_Step_Plus+0x16>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <Y_Axis_Big_Step_Plus+0x20>
     32e:	00 00       	nop
     330:	80 91 6e 03 	lds	r24, 0x036E
     334:	90 91 6f 03 	lds	r25, 0x036F
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	90 93 6f 03 	sts	0x036F, r25
     33e:	80 93 6e 03 	sts	0x036E, r24
     342:	f8 94       	cli
     344:	08 95       	ret

00000346 <Read_HX711_Right>:
unsigned long Read_HX711_Right(void)
{
	unsigned long count;
	unsigned char i;
	
	HX711_DT_Right |= (1 << PB4);
     346:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     348:	22 e0       	ldi	r18, 0x02	; 2
     34a:	2a 95       	dec	r18
     34c:	f1 f7       	brne	.-4      	; 0x34a <Read_HX711_Right+0x4>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <Read_HX711_Right+0xa>
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
     350:	28 98       	cbi	0x05, 0	; 5
     352:	32 e0       	ldi	r19, 0x02	; 2
     354:	3a 95       	dec	r19
     356:	f1 f7       	brne	.-4      	; 0x354 <Read_HX711_Right+0xe>
     358:	00 c0       	rjmp	.+0      	; 0x35a <Read_HX711_Right+0x14>
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Right == 1);
     35a:	85 b1       	in	r24, 0x05	; 5
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	e9 f3       	breq	.-6      	; 0x35a <Read_HX711_Right+0x14>
     360:	28 e1       	ldi	r18, 0x18	; 24
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	dc 01       	movw	r26, r24
	for(i=0;i<24;i++)
	{
		//PORTG = 0xFF;
		HX711_SCK_Right |= (1 << PB0);
     368:	28 9a       	sbi	0x05, 0	; 5
     36a:	32 e0       	ldi	r19, 0x02	; 2
     36c:	3a 95       	dec	r19
     36e:	f1 f7       	brne	.-4      	; 0x36c <Read_HX711_Right+0x26>
     370:	00 c0       	rjmp	.+0      	; 0x372 <Read_HX711_Right+0x2c>
		_delay_us(1);
		count=count<<1;
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	aa 1f       	adc	r26, r26
     378:	bb 1f       	adc	r27, r27
		HX711_SCK_Right &= ~(1 << PB0);
     37a:	28 98       	cbi	0x05, 0	; 5
     37c:	32 e0       	ldi	r19, 0x02	; 2
     37e:	3a 95       	dec	r19
     380:	f1 f7       	brne	.-4      	; 0x37e <Read_HX711_Right+0x38>
     382:	00 c0       	rjmp	.+0      	; 0x384 <Read_HX711_Right+0x3e>
		_delay_us(1);
		if(!(bit_is_clear(PINB, PB4)))
     384:	1c 9b       	sbis	0x03, 4	; 3
     386:	03 c0       	rjmp	.+6      	; 0x38e <Read_HX711_Right+0x48>
		{
			//PORTG = 0x00;
			//_delay_ms(500);
			count++;
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	21 50       	subi	r18, 0x01	; 1
	HX711_SCK_Right &= ~(1 << PB0);
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Right == 1);
	for(i=0;i<24;i++)
     390:	59 f7       	brne	.-42     	; 0x368 <Read_HX711_Right+0x22>
			//PORTG = 0x00;
			//_delay_ms(500);
			count++;
		}
	}
	HX711_SCK_Right |= (1 << PB0);
     392:	28 9a       	sbi	0x05, 0	; 5
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2a 95       	dec	r18
     398:	f1 f7       	brne	.-4      	; 0x396 <Read_HX711_Right+0x50>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <Read_HX711_Right+0x56>
	count ^= 0x800000;
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
     39c:	28 98       	cbi	0x05, 0	; 5
     39e:	32 e0       	ldi	r19, 0x02	; 2
     3a0:	3a 95       	dec	r19
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <Read_HX711_Right+0x5a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <Read_HX711_Right+0x60>
			//_delay_ms(500);
			count++;
		}
	}
	HX711_SCK_Right |= (1 << PB0);
	count ^= 0x800000;
     3a6:	bc 01       	movw	r22, r24
     3a8:	cd 01       	movw	r24, r26
     3aa:	80 58       	subi	r24, 0x80	; 128
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
	_delay_us(1);

	return(count);
}
     3ac:	08 95       	ret

000003ae <Get_Zero_Weight_Right>:
void Get_Zero_Weight_Right()
{
	HX711_Buffer_Right = Read_HX711_Right();
     3ae:	cb df       	rcall	.-106    	; 0x346 <Read_HX711_Right>
     3b0:	60 93 8c 03 	sts	0x038C, r22
     3b4:	70 93 8d 03 	sts	0x038D, r23
     3b8:	80 93 8e 03 	sts	0x038E, r24
     3bc:	90 93 8f 03 	sts	0x038F, r25
	Weight_Zero_Right = HX711_Buffer_Right/100;
     3c0:	24 e6       	ldi	r18, 0x64	; 100
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divmodsi4>
     3cc:	20 93 88 03 	sts	0x0388, r18
     3d0:	30 93 89 03 	sts	0x0389, r19
     3d4:	40 93 8a 03 	sts	0x038A, r20
     3d8:	50 93 8b 03 	sts	0x038B, r21
     3dc:	08 95       	ret

000003de <Get_Weight_Right>:
}
unsigned int Get_Weight_Right()
{
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
	HX711_Buffer_Right = Read_HX711_Right();
     3e6:	af df       	rcall	.-162    	; 0x346 <Read_HX711_Right>
	HX711_Buffer_Right = HX711_Buffer_Right/100;
     3e8:	24 e6       	ldi	r18, 0x64	; 100
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divmodsi4>
     3f4:	20 93 8c 03 	sts	0x038C, r18
     3f8:	30 93 8d 03 	sts	0x038D, r19
     3fc:	40 93 8e 03 	sts	0x038E, r20
     400:	50 93 8f 03 	sts	0x038F, r21

	Weight_Right = HX711_Buffer_Right;
	Weight_Right = (Weight_Right - Weight_Zero_Right);// -1.6764 Rade's constant (variable to grams)
     404:	80 91 88 03 	lds	r24, 0x0388
     408:	90 91 89 03 	lds	r25, 0x0389
     40c:	a0 91 8a 03 	lds	r26, 0x038A
     410:	b0 91 8b 03 	lds	r27, 0x038B
     414:	79 01       	movw	r14, r18
     416:	8a 01       	movw	r16, r20
     418:	e8 1a       	sub	r14, r24
     41a:	f9 0a       	sbc	r15, r25
     41c:	0a 0b       	sbc	r16, r26
     41e:	1b 0b       	sbc	r17, r27
     420:	c8 01       	movw	r24, r16
     422:	b7 01       	movw	r22, r14
	Weight_Right = (unsigned int)(((float)Weight_Right/7.35+0.05)*(-1.6764));
     424:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__floatsisf>
     428:	23 e3       	ldi	r18, 0x33	; 51
     42a:	33 e3       	ldi	r19, 0x33	; 51
     42c:	4b ee       	ldi	r20, 0xEB	; 235
     42e:	50 e4       	ldi	r21, 0x40	; 64
     430:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
     434:	2d ec       	ldi	r18, 0xCD	; 205
     436:	3c ec       	ldi	r19, 0xCC	; 204
     438:	4c e4       	ldi	r20, 0x4C	; 76
     43a:	5d e3       	ldi	r21, 0x3D	; 61
     43c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__addsf3>
     440:	26 e4       	ldi	r18, 0x46	; 70
     442:	34 e9       	ldi	r19, 0x94	; 148
     444:	46 ed       	ldi	r20, 0xD6	; 214
     446:	5f eb       	ldi	r21, 0xBF	; 191
     448:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__mulsf3>
     44c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
     450:	8b 01       	movw	r16, r22
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	00 93 84 03 	sts	0x0384, r16
     45a:	10 93 85 03 	sts	0x0385, r17
     45e:	20 93 86 03 	sts	0x0386, r18
     462:	30 93 87 03 	sts	0x0387, r19
	//1083 bez opterecenja
	return Weight_Right;
}
     466:	cb 01       	movw	r24, r22
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	08 95       	ret

00000472 <Read_HX711_Left>:
unsigned long Read_HX711_Left(void)
{
	unsigned long count;
	unsigned char i;
	
	HX711_DT_Left |= (1 << PE1); //HX711_DT_Left |= (1 << PL1);
     472:	71 9a       	sbi	0x0e, 1	; 14
     474:	22 e0       	ldi	r18, 0x02	; 2
     476:	2a 95       	dec	r18
     478:	f1 f7       	brne	.-4      	; 0x476 <Read_HX711_Left+0x4>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <Read_HX711_Left+0xa>
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     47c:	70 98       	cbi	0x0e, 0	; 14
     47e:	32 e0       	ldi	r19, 0x02	; 2
     480:	3a 95       	dec	r19
     482:	f1 f7       	brne	.-4      	; 0x480 <Read_HX711_Left+0xe>
     484:	00 c0       	rjmp	.+0      	; 0x486 <Read_HX711_Left+0x14>
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Left == 1); //PORTL HX711_DT_Left == 1
     486:	8e b1       	in	r24, 0x0e	; 14
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	e9 f3       	breq	.-6      	; 0x486 <Read_HX711_Left+0x14>
     48c:	28 e1       	ldi	r18, 0x18	; 24
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	dc 01       	movw	r26, r24
	for(i=0;i<24;i++)
	{
		//PORTG = 0xFF;
		HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
     494:	70 9a       	sbi	0x0e, 0	; 14
     496:	32 e0       	ldi	r19, 0x02	; 2
     498:	3a 95       	dec	r19
     49a:	f1 f7       	brne	.-4      	; 0x498 <Read_HX711_Left+0x26>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <Read_HX711_Left+0x2c>
		_delay_us(1);
		count=count<<1;
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	aa 1f       	adc	r26, r26
     4a4:	bb 1f       	adc	r27, r27
		HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     4a6:	70 98       	cbi	0x0e, 0	; 14
     4a8:	32 e0       	ldi	r19, 0x02	; 2
     4aa:	3a 95       	dec	r19
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <Read_HX711_Left+0x38>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <Read_HX711_Left+0x3e>
		_delay_us(1);
		if(!(bit_is_clear(PINE, PE1)))
     4b0:	61 9b       	sbis	0x0c, 1	; 12
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <Read_HX711_Left+0x48>
		{
			count++;
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	a1 1d       	adc	r26, r1
     4b8:	b1 1d       	adc	r27, r1
     4ba:	21 50       	subi	r18, 0x01	; 1
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Left == 1); //PORTL HX711_DT_Left == 1
	for(i=0;i<24;i++)
     4bc:	59 f7       	brne	.-42     	; 0x494 <Read_HX711_Left+0x22>
		if(!(bit_is_clear(PINE, PE1)))
		{
			count++;
		}
	}
	HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
     4be:	70 9a       	sbi	0x0e, 0	; 14
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	2a 95       	dec	r18
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Read_HX711_Left+0x50>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <Read_HX711_Left+0x56>
	count ^= 0x800000;
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     4c8:	70 98       	cbi	0x0e, 0	; 14
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	3a 95       	dec	r19
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <Read_HX711_Left+0x5a>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <Read_HX711_Left+0x60>
		{
			count++;
		}
	}
	HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
	count ^= 0x800000;
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	80 58       	subi	r24, 0x80	; 128
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
	_delay_us(1);

	return(count);
}
     4d8:	08 95       	ret

000004da <Get_Zero_Weight_Left>:
void Get_Zero_Weight_Left()
{
	HX711_Buffer_Left = Read_HX711_Left();
     4da:	cb df       	rcall	.-106    	; 0x472 <Read_HX711_Left>
     4dc:	60 93 80 03 	sts	0x0380, r22
     4e0:	70 93 81 03 	sts	0x0381, r23
     4e4:	80 93 82 03 	sts	0x0382, r24
     4e8:	90 93 83 03 	sts	0x0383, r25
	Weight_Zero_Left = HX711_Buffer_Left/100;
     4ec:	24 e6       	ldi	r18, 0x64	; 100
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divmodsi4>
     4f8:	20 93 7c 03 	sts	0x037C, r18
     4fc:	30 93 7d 03 	sts	0x037D, r19
     500:	40 93 7e 03 	sts	0x037E, r20
     504:	50 93 7f 03 	sts	0x037F, r21
     508:	08 95       	ret

0000050a <Get_Weight_Left>:
	//Weight_Zero_Left = (unsigned int)(((float)Weight_Zero_Left/7.35+0.05)*(-1.6168));
}
unsigned int Get_Weight_Left()
{
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
	unsigned  MyWeight [16];
	HX711_Buffer_Left = Read_HX711_Left();
     512:	af df       	rcall	.-162    	; 0x472 <Read_HX711_Left>
	HX711_Buffer_Left = HX711_Buffer_Left/100;
     514:	24 e6       	ldi	r18, 0x64	; 100
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divmodsi4>
     520:	20 93 80 03 	sts	0x0380, r18
     524:	30 93 81 03 	sts	0x0381, r19
     528:	40 93 82 03 	sts	0x0382, r20
     52c:	50 93 83 03 	sts	0x0383, r21

	Weight_Left = HX711_Buffer_Left;
	Weight_Left = (Weight_Left - Weight_Zero_Left);// -1.6168 Rade's constant (variable to grams)
     530:	80 91 7c 03 	lds	r24, 0x037C
     534:	90 91 7d 03 	lds	r25, 0x037D
     538:	a0 91 7e 03 	lds	r26, 0x037E
     53c:	b0 91 7f 03 	lds	r27, 0x037F
     540:	79 01       	movw	r14, r18
     542:	8a 01       	movw	r16, r20
     544:	e8 1a       	sub	r14, r24
     546:	f9 0a       	sbc	r15, r25
     548:	0a 0b       	sbc	r16, r26
     54a:	1b 0b       	sbc	r17, r27
     54c:	c8 01       	movw	r24, r16
     54e:	b7 01       	movw	r22, r14
	Weight_Left = (unsigned int)(((float)Weight_Left/7.35+0.05)*(-1.6168));
     550:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__floatsisf>
     554:	23 e3       	ldi	r18, 0x33	; 51
     556:	33 e3       	ldi	r19, 0x33	; 51
     558:	4b ee       	ldi	r20, 0xEB	; 235
     55a:	50 e4       	ldi	r21, 0x40	; 64
     55c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
     560:	2d ec       	ldi	r18, 0xCD	; 205
     562:	3c ec       	ldi	r19, 0xCC	; 204
     564:	4c e4       	ldi	r20, 0x4C	; 76
     566:	5d e3       	ldi	r21, 0x3D	; 61
     568:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__addsf3>
     56c:	2d e4       	ldi	r18, 0x4D	; 77
     56e:	33 ef       	ldi	r19, 0xF3	; 243
     570:	4e ec       	ldi	r20, 0xCE	; 206
     572:	5f eb       	ldi	r21, 0xBF	; 191
     574:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__mulsf3>
     578:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__fixunssfsi>
     57c:	8b 01       	movw	r16, r22
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	00 93 78 03 	sts	0x0378, r16
     586:	10 93 79 03 	sts	0x0379, r17
     58a:	20 93 7a 03 	sts	0x037A, r18
     58e:	30 93 7b 03 	sts	0x037B, r19
	
	return Weight_Left;
}  
     592:	cb 01       	movw	r24, r22
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	08 95       	ret

0000059e <FillHalf>:

void FillHalf()
{
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
	PORTK = (1<<PK5);// Open AIR
     5a8:	80 e2       	ldi	r24, 0x20	; 32
     5aa:	80 93 08 01 	sts	0x0108, r24
	
	Get_Zero_Weight_Left();
     5ae:	95 df       	rcall	.-214    	; 0x4da <Get_Zero_Weight_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	2f ef       	ldi	r18, 0xFF	; 255
     5b2:	82 e5       	ldi	r24, 0x52	; 82
     5b4:	97 e0       	ldi	r25, 0x07	; 7
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	80 40       	sbci	r24, 0x00	; 0
     5ba:	90 40       	sbci	r25, 0x00	; 0
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <FillHalf+0x18>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <FillHalf+0x22>
     5c0:	00 00       	nop
     5c2:	ef ef       	ldi	r30, 0xFF	; 255
     5c4:	f5 ea       	ldi	r31, 0xA5	; 165
     5c6:	2e e0       	ldi	r18, 0x0E	; 14
     5c8:	e1 50       	subi	r30, 0x01	; 1
     5ca:	f0 40       	sbci	r31, 0x00	; 0
     5cc:	20 40       	sbci	r18, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <FillHalf+0x2a>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <FillHalf+0x34>
     5d2:	00 00       	nop
	
	//////OVO MORA
	_delay_ms(600);//?????????????????????????????????????????????????????????????????????
	for(int i=0;i<2;i++)
	{
		Global_Weight_Left = Get_Weight_Left();
     5d4:	9a df       	rcall	.-204    	; 0x50a <Get_Weight_Left>
     5d6:	90 93 e7 03 	sts	0x03E7, r25
     5da:	80 93 e6 03 	sts	0x03E6, r24
     5de:	8f e7       	ldi	r24, 0x7F	; 127
     5e0:	99 ea       	ldi	r25, 0xA9	; 169
     5e2:	e3 e0       	ldi	r30, 0x03	; 3
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e0 40       	sbci	r30, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <FillHalf+0x46>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <FillHalf+0x50>
     5ee:	00 00       	nop
     5f0:	8c df       	rcall	.-232    	; 0x50a <Get_Weight_Left>
     5f2:	90 93 e7 03 	sts	0x03E7, r25
     5f6:	80 93 e6 03 	sts	0x03E6, r24
     5fa:	ff e7       	ldi	r31, 0x7F	; 127
     5fc:	29 ea       	ldi	r18, 0xA9	; 169
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	f1 50       	subi	r31, 0x01	; 1
     602:	20 40       	sbci	r18, 0x00	; 0
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <FillHalf+0x62>
     608:	00 c0       	rjmp	.+0      	; 0x60a <FillHalf+0x6c>
     60a:	00 00       	nop
     60c:	ef e1       	ldi	r30, 0x1F	; 31
     60e:	fe e4       	ldi	r31, 0x4E	; 78
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <FillHalf+0x72>
     614:	00 c0       	rjmp	.+0      	; 0x616 <FillHalf+0x78>
     616:	00 00       	nop
	//for(int i=0;i<2;i++)
	//{
	//	Global_Weight_Right = Get_Weight_Right();
	//	_delay_ms(150);
	//}
	int Init_Grams_Left  = Global_Weight_Left;
     618:	c0 91 e6 03 	lds	r28, 0x03E6
     61c:	d0 91 e7 03 	lds	r29, 0x03E7
	//int Init_Grams_Right  = Global_Weight_Right;
	
	char tempValve = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
     620:	80 91 e8 03 	lds	r24, 0x03E8
     624:	90 91 e9 03 	lds	r25, 0x03E9
     628:	18 16       	cp	r1, r24
     62a:	19 06       	cpc	r1, r25
     62c:	0c f4       	brge	.+2      	; 0x630 <FillHalf+0x92>
     62e:	b0 c0       	rjmp	.+352    	; 0x790 <FillHalf+0x1f2>
     630:	31 c0       	rjmp	.+98     	; 0x694 <FillHalf+0xf6>
	{
		if (tempValve == 0)
		{
			PORTK = (1<<PK4) | (1<<PK5) | (0<<PK7);// Open Valve
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
     632:	20 91 e6 03 	lds	r18, 0x03E6
     636:	30 91 e7 03 	lds	r19, 0x03E7
     63a:	2c 1b       	sub	r18, r28
     63c:	3d 0b       	sbc	r19, r29
     63e:	80 91 e8 03 	lds	r24, 0x03E8
     642:	90 91 e9 03 	lds	r25, 0x03E9
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	14 f0       	brlt	.+4      	; 0x650 <FillHalf+0xb2>
		{
			PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);
     64c:	f8 01       	movw	r30, r16
     64e:	f0 82       	st	Z, r15
		//{
		//	PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
		//}
		tempValve = 1;
			
		Global_Weight_Left = Get_Weight_Left();
     650:	5c df       	rcall	.-328    	; 0x50a <Get_Weight_Left>
     652:	90 93 e7 03 	sts	0x03E7, r25
     656:	80 93 e6 03 	sts	0x03E6, r24
     65a:	ff e7       	ldi	r31, 0x7F	; 127
     65c:	2f ea       	ldi	r18, 0xAF	; 175
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	f1 50       	subi	r31, 0x01	; 1
     662:	20 40       	sbci	r18, 0x00	; 0
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <FillHalf+0xc2>
     668:	00 c0       	rjmp	.+0      	; 0x66a <FillHalf+0xcc>
     66a:	00 00       	nop
	int Init_Grams_Left  = Global_Weight_Left;
	//int Init_Grams_Right  = Global_Weight_Right;
	
	char tempValve = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
     66c:	20 91 e6 03 	lds	r18, 0x03E6
     670:	30 91 e7 03 	lds	r19, 0x03E7
     674:	2c 1b       	sub	r18, r28
     676:	3d 0b       	sbc	r19, r29
     678:	c9 01       	movw	r24, r18
     67a:	99 23       	and	r25, r25
     67c:	24 f4       	brge	.+8      	; 0x686 <FillHalf+0xe8>
     67e:	88 27       	eor	r24, r24
     680:	99 27       	eor	r25, r25
     682:	82 1b       	sub	r24, r18
     684:	93 0b       	sbc	r25, r19
     686:	20 91 e8 03 	lds	r18, 0x03E8
     68a:	30 91 e9 03 	lds	r19, 0x03E9
     68e:	82 17       	cp	r24, r18
     690:	93 07       	cpc	r25, r19
     692:	7c f2       	brlt	.-98     	; 0x632 <FillHalf+0x94>
		Global_Weight_Left = Get_Weight_Left();
		//_delay_ms(10);
		//Global_Weight_Right = Get_Weight_Right();
		_delay_ms(110);
	}
	PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);// Close Valve
     694:	80 e2       	ldi	r24, 0x20	; 32
     696:	80 93 08 01 	sts	0x0108, r24
	int oldSum_L = Sum_L;
	//int oldSum_R = Sum_R;
	
	tempValve = 0;
	
	Sum_L = Sum_L + abs(Global_Weight_Left-Init_Grams_Left);
     69a:	80 91 e6 03 	lds	r24, 0x03E6
     69e:	90 91 e7 03 	lds	r25, 0x03E7
     6a2:	8c 1b       	sub	r24, r28
     6a4:	9d 0b       	sbc	r25, r29
     6a6:	9c 01       	movw	r18, r24
     6a8:	22 f4       	brpl	.+8      	; 0x6b2 <FillHalf+0x114>
     6aa:	22 27       	eor	r18, r18
     6ac:	33 27       	eor	r19, r19
     6ae:	28 1b       	sub	r18, r24
     6b0:	39 0b       	sbc	r19, r25
     6b2:	40 91 e2 03 	lds	r20, 0x03E2
     6b6:	50 91 e3 03 	lds	r21, 0x03E3
     6ba:	42 0f       	add	r20, r18
     6bc:	53 1f       	adc	r21, r19
     6be:	50 93 e3 03 	sts	0x03E3, r21
     6c2:	40 93 e2 03 	sts	0x03E2, r20
	//Sum_R = Sum_R + abs(Global_Weight_Right-Init_Grams_Right);
	
	if (Sum_L - oldSum_L > Grams + 50 || Global_Weight_Left - Init_Grams_Left > Grams + 2//4
     6c6:	40 91 e8 03 	lds	r20, 0x03E8
     6ca:	50 91 e9 03 	lds	r21, 0x03E9
     6ce:	ba 01       	movw	r22, r20
     6d0:	6e 5c       	subi	r22, 0xCE	; 206
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	62 17       	cp	r22, r18
     6d6:	73 07       	cpc	r23, r19
     6d8:	5c f0       	brlt	.+22     	; 0x6f0 <FillHalf+0x152>
     6da:	9a 01       	movw	r18, r20
     6dc:	2e 5f       	subi	r18, 0xFE	; 254
     6de:	3f 4f       	sbci	r19, 0xFF	; 255
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	2c f0       	brlt	.+10     	; 0x6f0 <FillHalf+0x152>
									  || Global_Weight_Left - Init_Grams_Left < Grams - 2)//4
     6e6:	42 50       	subi	r20, 0x02	; 2
     6e8:	51 09       	sbc	r21, r1
     6ea:	84 17       	cp	r24, r20
     6ec:	95 07       	cpc	r25, r21
     6ee:	34 f5       	brge	.+76     	; 0x73c <FillHalf+0x19e>
	{
		Lcd4_Clear();
     6f0:	80 d7       	rcall	.+3840   	; 0x15f2 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	80 d7       	rcall	.+3840   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow L");
     6fc:	8d e1       	ldi	r24, 0x1D	; 29
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	fb d7       	rcall	.+4086   	; 0x16f8 <Lcd4_Write_String>
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	e3 ed       	ldi	r30, 0xD3	; 211
     706:	f0 e3       	ldi	r31, 0x30	; 48
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	e0 40       	sbci	r30, 0x00	; 0
     70c:	f0 40       	sbci	r31, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <FillHalf+0x16a>
     710:	00 c0       	rjmp	.+0      	; 0x712 <FillHalf+0x174>
     712:	00 00       	nop
		_delay_ms(2000);
		errorFill_L[countErrors_L] = countFill;
     714:	80 91 76 03 	lds	r24, 0x0376
     718:	90 91 77 03 	lds	r25, 0x0377
     71c:	fc 01       	movw	r30, r24
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	e8 54       	subi	r30, 0x48	; 72
     724:	fc 4f       	sbci	r31, 0xFC	; 252
     726:	20 91 04 02 	lds	r18, 0x0204
     72a:	30 91 05 02 	lds	r19, 0x0205
     72e:	31 83       	std	Z+1, r19	; 0x01
     730:	20 83       	st	Z, r18
		countErrors_L++;
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	90 93 77 03 	sts	0x0377, r25
     738:	80 93 76 03 	sts	0x0376, r24
     73c:	8f e1       	ldi	r24, 0x1F	; 31
     73e:	9e e4       	ldi	r25, 0x4E	; 78
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <FillHalf+0x1a2>
     744:	00 c0       	rjmp	.+0      	; 0x746 <FillHalf+0x1a8>
     746:	00 00       	nop
	//	Lcd4_Write_String("Sum overflow R");
	//	_delay_ms(2000);
	//	errorFill_R[countErrors_R] = countFill;
	//	countErrors_R++;
	//}
	countFill++;
     748:	80 91 04 02 	lds	r24, 0x0204
     74c:	90 91 05 02 	lds	r25, 0x0205
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	90 93 05 02 	sts	0x0205, r25
     756:	80 93 04 02 	sts	0x0204, r24
     75a:	ef e1       	ldi	r30, 0x1F	; 31
     75c:	fe e4       	ldi	r31, 0x4E	; 78
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <FillHalf+0x1c0>
     762:	00 c0       	rjmp	.+0      	; 0x764 <FillHalf+0x1c6>
     764:	00 00       	nop
	_delay_ms(10);
	
	Lcd4_Clear();
     766:	45 d7       	rcall	.+3722   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	45 d7       	rcall	.+3722   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Fill Complete");
     772:	8c e2       	ldi	r24, 0x2C	; 44
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	c0 d7       	rcall	.+3968   	; 0x16f8 <Lcd4_Write_String>
     778:	ff ef       	ldi	r31, 0xFF	; 255
     77a:	29 e6       	ldi	r18, 0x69	; 105
     77c:	88 e1       	ldi	r24, 0x18	; 24
     77e:	f1 50       	subi	r31, 0x01	; 1
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <FillHalf+0x1e0>
     786:	00 c0       	rjmp	.+0      	; 0x788 <FillHalf+0x1ea>
     788:	00 00       	nop
	_delay_ms(1000);
	PORTK = (0<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
     78a:	10 92 08 01 	sts	0x0108, r1
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <FillHalf+0x204>
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
	{
		if (tempValve == 0)
		{
			PORTK = (1<<PK4) | (1<<PK5) | (0<<PK7);// Open Valve
     790:	80 e3       	ldi	r24, 0x30	; 48
     792:	80 93 08 01 	sts	0x0108, r24
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
		{
			PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);
     796:	08 e0       	ldi	r16, 0x08	; 8
     798:	11 e0       	ldi	r17, 0x01	; 1
     79a:	68 94       	set
     79c:	ff 24       	eor	r15, r15
     79e:	f5 f8       	bld	r15, 5
     7a0:	48 cf       	rjmp	.-368    	; 0x632 <FillHalf+0x94>
	Lcd4_Clear();
	Lcd4_Set_Cursor(1,0);
	Lcd4_Write_String("Fill Complete");
	_delay_ms(1000);
	PORTK = (0<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	08 95       	ret

000007ae <Fill>:
void Fill()
{ 
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	// |= (1 << PB4);
	// &= ~(1 << PB0);
	//PORTK = (1<<PK5);// Open AIR
	PORTK |= (1<<PK5);
     7c4:	e8 e0       	ldi	r30, 0x08	; 8
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	80 81       	ld	r24, Z
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	80 83       	st	Z, r24
	
	Get_Zero_Weight_Left();
     7ce:	85 de       	rcall	.-758    	; 0x4da <Get_Zero_Weight_Left>
     7d0:	8f e1       	ldi	r24, 0x1F	; 31
     7d2:	9e e4       	ldi	r25, 0x4E	; 78
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <Fill+0x26>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <Fill+0x2c>
     7da:	00 00       	nop
	_delay_ms(10);
	Get_Zero_Weight_Right();
     7dc:	e8 dd       	rcall	.-1072   	; 0x3ae <Get_Zero_Weight_Right>
     7de:	8f e1       	ldi	r24, 0x1F	; 31
     7e0:	9e e4       	ldi	r25, 0x4E	; 78
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <Fill+0x34>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <Fill+0x3a>
     7e8:	00 00       	nop
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
     7ec:	20 e7       	ldi	r18, 0x70	; 112
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	91 50       	subi	r25, 0x01	; 1
     7f2:	20 40       	sbci	r18, 0x00	; 0
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <Fill+0x42>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <Fill+0x4c>
     7fa:	00 00       	nop
     7fc:	c3 e0       	ldi	r28, 0x03	; 3
     7fe:	d0 e0       	ldi	r29, 0x00	; 0
	
	//////OVO MORA 
	_delay_ms(100);//600
	for(int i=0;i<3;i++)
	{
	  Global_Weight_Left = Get_Weight_Left();
     800:	84 de       	rcall	.-760    	; 0x50a <Get_Weight_Left>
     802:	90 93 e7 03 	sts	0x03E7, r25
     806:	80 93 e6 03 	sts	0x03E6, r24
     80a:	9f ef       	ldi	r25, 0xFF	; 255
     80c:	22 e5       	ldi	r18, 0x52	; 82
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	91 50       	subi	r25, 0x01	; 1
     812:	20 40       	sbci	r18, 0x00	; 0
     814:	80 40       	sbci	r24, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <Fill+0x62>
     818:	00 c0       	rjmp	.+0      	; 0x81a <Fill+0x6c>
     81a:	00 00       	nop
     81c:	21 97       	sbiw	r28, 0x01	; 1
	
	//Lcd4_Clear();
	
	//////OVO MORA 
	_delay_ms(100);//600
	for(int i=0;i<3;i++)
     81e:	20 97       	sbiw	r28, 0x00	; 0
     820:	79 f7       	brne	.-34     	; 0x800 <Fill+0x52>
     822:	8f e1       	ldi	r24, 0x1F	; 31
     824:	9e e4       	ldi	r25, 0x4E	; 78
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <Fill+0x78>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <Fill+0x7e>
     82c:	00 00       	nop
     82e:	c3 e0       	ldi	r28, 0x03	; 3
     830:	d0 e0       	ldi	r29, 0x00	; 0
	  _delay_ms(300);
	}
	_delay_ms(10);
	for(int i=0;i<3;i++)
	{
		Global_Weight_Right = Get_Weight_Right();
     832:	d5 dd       	rcall	.-1110   	; 0x3de <Get_Weight_Right>
     834:	90 93 e5 03 	sts	0x03E5, r25
     838:	80 93 e4 03 	sts	0x03E4, r24
     83c:	9f e7       	ldi	r25, 0x7F	; 127
     83e:	29 ea       	ldi	r18, 0xA9	; 169
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	91 50       	subi	r25, 0x01	; 1
     844:	20 40       	sbci	r18, 0x00	; 0
     846:	80 40       	sbci	r24, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <Fill+0x94>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <Fill+0x9e>
     84c:	00 00       	nop
     84e:	21 97       	sbiw	r28, 0x01	; 1
	{
	  Global_Weight_Left = Get_Weight_Left();
	  _delay_ms(300);
	}
	_delay_ms(10);
	for(int i=0;i<3;i++)
     850:	20 97       	sbiw	r28, 0x00	; 0
     852:	79 f7       	brne	.-34     	; 0x832 <Fill+0x84>
	{
		Global_Weight_Right = Get_Weight_Right();
		_delay_ms(150);
	}  
	int Init_Grams_Left  = Global_Weight_Left;  
     854:	00 91 e6 03 	lds	r16, 0x03E6
     858:	10 91 e7 03 	lds	r17, 0x03E7
	int Init_Grams_Right  = Global_Weight_Right;
     85c:	a0 90 e4 03 	lds	r10, 0x03E4
     860:	b0 90 e5 03 	lds	r11, 0x03E5
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     864:	4a e0       	ldi	r20, 0x0A	; 10
     866:	63 ef       	ldi	r22, 0xF3	; 243
     868:	73 e0       	ldi	r23, 0x03	; 3
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
     870:	8f e1       	ldi	r24, 0x1F	; 31
     872:	9e e4       	ldi	r25, 0x4E	; 78
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <Fill+0xc6>
     878:	00 c0       	rjmp	.+0      	; 0x87a <Fill+0xcc>
     87a:	00 00       	nop
     87c:	4a e0       	ldi	r20, 0x0A	; 10
     87e:	6b ef       	ldi	r22, 0xFB	; 251
     880:	73 e0       	ldi	r23, 0x03	; 3
     882:	c5 01       	movw	r24, r10
     884:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
	
	itoa(Init_Grams_Left, MyWeight, 10);
	_delay_ms(10);
	itoa(Init_Grams_Right, MyWeight2, 10);
	Lcd4_Clear();
     888:	b4 d6       	rcall	.+3432   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	b4 d6       	rcall	.+3432   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String(MyWeight);
     894:	83 ef       	ldi	r24, 0xF3	; 243
     896:	93 e0       	ldi	r25, 0x03	; 3
     898:	2f d7       	rcall	.+3678   	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	ac d6       	rcall	.+3416   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String(MyWeight2);
     8a4:	8b ef       	ldi	r24, 0xFB	; 251
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	27 d7       	rcall	.+3662   	; 0x16f8 <Lcd4_Write_String>
     8aa:	9f ef       	ldi	r25, 0xFF	; 255
     8ac:	23 ed       	ldi	r18, 0xD3	; 211
     8ae:	80 e3       	ldi	r24, 0x30	; 48
     8b0:	91 50       	subi	r25, 0x01	; 1
     8b2:	20 40       	sbci	r18, 0x00	; 0
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <Fill+0x102>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <Fill+0x10c>
     8ba:	00 00       	nop
	_delay_ms(2000);
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
     8bc:	c1 2c       	mov	r12, r1
     8be:	d1 2c       	mov	r13, r1
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String(MyWeight2);
	_delay_ms(2000);
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
     8c0:	e1 2c       	mov	r14, r1
     8c2:	f1 2c       	mov	r15, r1
	Lcd4_Write_String(MyWeight);
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String(MyWeight2);
	_delay_ms(2000);
	
	char tempValve = 0;
     8c4:	60 e0       	ldi	r22, 0x00	; 0
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
	{
		if (tempValve == 0)
		{         
			//PORTK = (1<<PK4) | (1<<PK5) | (1<<PK7);// Open Valve
			PORTK |= (1<<PK4);
     8c6:	c8 e0       	ldi	r28, 0x08	; 8
     8c8:	d1 e0       	ldi	r29, 0x01	; 1
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
			PORTK &= ~(1<<PK7);//0
		}
		tempValve = 1;
     8ca:	99 24       	eor	r9, r9
     8cc:	93 94       	inc	r9
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
     8ce:	84 c0       	rjmp	.+264    	; 0x9d8 <Fill+0x22a>
	{
		if (tempValve == 0)
     8d0:	61 11       	cpse	r22, r1
     8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <Fill+0x132>
		{         
			//PORTK = (1<<PK4) | (1<<PK5) | (1<<PK7);// Open Valve
			PORTK |= (1<<PK4);
     8d4:	88 81       	ld	r24, Y
     8d6:	80 61       	ori	r24, 0x10	; 16
     8d8:	88 83       	st	Y, r24
			PORTK |= (1<<PK7);
     8da:	88 81       	ld	r24, Y
     8dc:	80 68       	ori	r24, 0x80	; 128
     8de:	88 83       	st	Y, r24
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
     8e0:	20 91 e6 03 	lds	r18, 0x03E6
     8e4:	30 91 e7 03 	lds	r19, 0x03E7
     8e8:	20 1b       	sub	r18, r16
     8ea:	31 0b       	sbc	r19, r17
     8ec:	80 91 e8 03 	lds	r24, 0x03E8
     8f0:	90 91 e9 03 	lds	r25, 0x03E9
     8f4:	28 17       	cp	r18, r24
     8f6:	39 07       	cpc	r19, r25
     8f8:	34 f0       	brlt	.+12     	; 0x906 <Fill+0x158>
		{
			//PORTK = (0<<PK4) | (1<<PK5) | (1<<PK7);
			PORTK &= ~(1<<PK4);//0
     8fa:	88 81       	ld	r24, Y
     8fc:	8f 7e       	andi	r24, 0xEF	; 239
     8fe:	88 83       	st	Y, r24
			PORTK |= (1<<PK7);//1
     900:	88 81       	ld	r24, Y
     902:	80 68       	ori	r24, 0x80	; 128
     904:	88 83       	st	Y, r24
		}
		if ((Global_Weight_Right-Init_Grams_Right) >= Grams)
     906:	20 91 e4 03 	lds	r18, 0x03E4
     90a:	30 91 e5 03 	lds	r19, 0x03E5
     90e:	2a 19       	sub	r18, r10
     910:	3b 09       	sbc	r19, r11
     912:	80 91 e8 03 	lds	r24, 0x03E8
     916:	90 91 e9 03 	lds	r25, 0x03E9
     91a:	28 17       	cp	r18, r24
     91c:	39 07       	cpc	r19, r25
     91e:	34 f0       	brlt	.+12     	; 0x92c <Fill+0x17e>
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
     920:	88 81       	ld	r24, Y
     922:	80 61       	ori	r24, 0x10	; 16
     924:	88 83       	st	Y, r24
			PORTK &= ~(1<<PK7);//0
     926:	88 81       	ld	r24, Y
     928:	8f 77       	andi	r24, 0x7F	; 127
     92a:	88 83       	st	Y, r24
		//Lcd4_Set_Cursor(2,0);
		//Lcd4_Write_String(MyWeight2);
		////_delay_ms(10);//700
		////_delay_ms(150);//200ok
		
		Global_Weight_Left = Get_Weight_Left();
     92c:	ee dd       	rcall	.-1060   	; 0x50a <Get_Weight_Left>
     92e:	90 93 e7 03 	sts	0x03E7, r25
     932:	80 93 e6 03 	sts	0x03E6, r24
		if (abs(Global_Weight_Left-Init_Grams_Left) > (Grams * 5))
     936:	80 1b       	sub	r24, r16
     938:	91 0b       	sbc	r25, r17
     93a:	9c 01       	movw	r18, r24
     93c:	22 f4       	brpl	.+8      	; 0x946 <Fill+0x198>
     93e:	22 27       	eor	r18, r18
     940:	33 27       	eor	r19, r19
     942:	28 1b       	sub	r18, r24
     944:	39 0b       	sbc	r19, r25
     946:	80 91 e8 03 	lds	r24, 0x03E8
     94a:	90 91 e9 03 	lds	r25, 0x03E9
     94e:	ac 01       	movw	r20, r24
     950:	44 0f       	add	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	44 0f       	add	r20, r20
     956:	55 1f       	adc	r21, r21
     958:	84 0f       	add	r24, r20
     95a:	95 1f       	adc	r25, r21
     95c:	82 17       	cp	r24, r18
     95e:	93 07       	cpc	r25, r19
     960:	24 f4       	brge	.+8      	; 0x96a <Fill+0x1bc>
		{
			Global_Weight_Left = TEMP_Grams_Left;
     962:	f0 92 e7 03 	sts	0x03E7, r15
     966:	e0 92 e6 03 	sts	0x03E6, r14
		}
		TEMP_Grams_Left = Global_Weight_Left;
     96a:	e0 90 e6 03 	lds	r14, 0x03E6
     96e:	f0 90 e7 03 	lds	r15, 0x03E7
     972:	8f e1       	ldi	r24, 0x1F	; 31
     974:	9e e4       	ldi	r25, 0x4E	; 78
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	f1 f7       	brne	.-4      	; 0x976 <Fill+0x1c8>
     97a:	00 c0       	rjmp	.+0      	; 0x97c <Fill+0x1ce>
     97c:	00 00       	nop
		//_delay_ms(150);
		_delay_ms(10);
		Global_Weight_Right = Get_Weight_Right();
     97e:	2f dd       	rcall	.-1442   	; 0x3de <Get_Weight_Right>
     980:	90 93 e5 03 	sts	0x03E5, r25
     984:	80 93 e4 03 	sts	0x03E4, r24
		if (abs(Global_Weight_Right-Init_Grams_Right) > (Grams * 5))
     988:	8a 19       	sub	r24, r10
     98a:	9b 09       	sbc	r25, r11
     98c:	9c 01       	movw	r18, r24
     98e:	22 f4       	brpl	.+8      	; 0x998 <Fill+0x1ea>
     990:	22 27       	eor	r18, r18
     992:	33 27       	eor	r19, r19
     994:	28 1b       	sub	r18, r24
     996:	39 0b       	sbc	r19, r25
     998:	80 91 e8 03 	lds	r24, 0x03E8
     99c:	90 91 e9 03 	lds	r25, 0x03E9
     9a0:	ac 01       	movw	r20, r24
     9a2:	44 0f       	add	r20, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	44 0f       	add	r20, r20
     9a8:	55 1f       	adc	r21, r21
     9aa:	84 0f       	add	r24, r20
     9ac:	95 1f       	adc	r25, r21
     9ae:	82 17       	cp	r24, r18
     9b0:	93 07       	cpc	r25, r19
     9b2:	24 f4       	brge	.+8      	; 0x9bc <Fill+0x20e>
		{
			Global_Weight_Right = TEMP_Grams_Right;
     9b4:	d0 92 e5 03 	sts	0x03E5, r13
     9b8:	c0 92 e4 03 	sts	0x03E4, r12
		}
		TEMP_Grams_Right = Global_Weight_Right;
     9bc:	c0 90 e4 03 	lds	r12, 0x03E4
     9c0:	d0 90 e5 03 	lds	r13, 0x03E5
     9c4:	9f e7       	ldi	r25, 0x7F	; 127
     9c6:	2f ea       	ldi	r18, 0xAF	; 175
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	20 40       	sbci	r18, 0x00	; 0
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <Fill+0x21c>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <Fill+0x226>
     9d4:	00 00       	nop
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
			PORTK &= ~(1<<PK7);//0
		}
		tempValve = 1;
     9d6:	69 2d       	mov	r22, r9
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
     9d8:	80 91 e8 03 	lds	r24, 0x03E8
     9dc:	90 91 e9 03 	lds	r25, 0x03E9
     9e0:	40 91 e6 03 	lds	r20, 0x03E6
     9e4:	50 91 e7 03 	lds	r21, 0x03E7
     9e8:	40 1b       	sub	r20, r16
     9ea:	51 0b       	sbc	r21, r17
     9ec:	9a 01       	movw	r18, r20
     9ee:	22 f4       	brpl	.+8      	; 0x9f8 <Fill+0x24a>
     9f0:	22 27       	eor	r18, r18
     9f2:	33 27       	eor	r19, r19
     9f4:	24 1b       	sub	r18, r20
     9f6:	35 0b       	sbc	r19, r21
     9f8:	28 17       	cp	r18, r24
     9fa:	39 07       	cpc	r19, r25
     9fc:	0c f4       	brge	.+2      	; 0xa00 <Fill+0x252>
     9fe:	68 cf       	rjmp	.-304    	; 0x8d0 <Fill+0x122>
     a00:	40 91 e4 03 	lds	r20, 0x03E4
     a04:	50 91 e5 03 	lds	r21, 0x03E5
     a08:	4a 19       	sub	r20, r10
     a0a:	5b 09       	sbc	r21, r11
     a0c:	9a 01       	movw	r18, r20
     a0e:	22 f4       	brpl	.+8      	; 0xa18 <Fill+0x26a>
     a10:	22 27       	eor	r18, r18
     a12:	33 27       	eor	r19, r19
     a14:	24 1b       	sub	r18, r20
     a16:	35 0b       	sbc	r19, r21
     a18:	28 17       	cp	r18, r24
     a1a:	39 07       	cpc	r19, r25
     a1c:	0c f4       	brge	.+2      	; 0xa20 <Fill+0x272>
     a1e:	58 cf       	rjmp	.-336    	; 0x8d0 <Fill+0x122>
		}
		TEMP_Grams_Right = Global_Weight_Right;
		_delay_ms(110);
	}
	//PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);// Close Valve
	PORTK &= ~(1<<PK4);
     a20:	e8 e0       	ldi	r30, 0x08	; 8
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	80 81       	ld	r24, Z
     a26:	8f 7e       	andi	r24, 0xEF	; 239
     a28:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK7);
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 77       	andi	r24, 0x7F	; 127
     a2e:	80 83       	st	Z, r24
	
	int oldSum_L = Sum_L;
	int oldSum_R = Sum_R;
     a30:	c0 91 e0 03 	lds	r28, 0x03E0
     a34:	d0 91 e1 03 	lds	r29, 0x03E1
	
	tempValve = 0;
	
	Sum_L = Sum_L + abs(Global_Weight_Left-Init_Grams_Left);
     a38:	80 91 e6 03 	lds	r24, 0x03E6
     a3c:	90 91 e7 03 	lds	r25, 0x03E7
     a40:	80 1b       	sub	r24, r16
     a42:	91 0b       	sbc	r25, r17
     a44:	9c 01       	movw	r18, r24
     a46:	22 f4       	brpl	.+8      	; 0xa50 <Fill+0x2a2>
     a48:	22 27       	eor	r18, r18
     a4a:	33 27       	eor	r19, r19
     a4c:	28 1b       	sub	r18, r24
     a4e:	39 0b       	sbc	r19, r25
     a50:	b9 01       	movw	r22, r18
     a52:	40 91 e2 03 	lds	r20, 0x03E2
     a56:	50 91 e3 03 	lds	r21, 0x03E3
     a5a:	24 0f       	add	r18, r20
     a5c:	35 1f       	adc	r19, r21
     a5e:	30 93 e3 03 	sts	0x03E3, r19
     a62:	20 93 e2 03 	sts	0x03E2, r18
	Sum_R = Sum_R + abs(Global_Weight_Right-Init_Grams_Right);
     a66:	40 91 e4 03 	lds	r20, 0x03E4
     a6a:	50 91 e5 03 	lds	r21, 0x03E5
     a6e:	4a 19       	sub	r20, r10
     a70:	5b 09       	sbc	r21, r11
     a72:	9a 01       	movw	r18, r20
     a74:	22 f4       	brpl	.+8      	; 0xa7e <Fill+0x2d0>
     a76:	22 27       	eor	r18, r18
     a78:	33 27       	eor	r19, r19
     a7a:	24 1b       	sub	r18, r20
     a7c:	35 0b       	sbc	r19, r21
     a7e:	2c 0f       	add	r18, r28
     a80:	3d 1f       	adc	r19, r29
     a82:	30 93 e1 03 	sts	0x03E1, r19
     a86:	20 93 e0 03 	sts	0x03E0, r18
	
	if (Sum_L - oldSum_L > Grams + 50 || Global_Weight_Left - Init_Grams_Left > Grams + 3//4 
     a8a:	20 91 e8 03 	lds	r18, 0x03E8
     a8e:	30 91 e9 03 	lds	r19, 0x03E9
     a92:	a9 01       	movw	r20, r18
     a94:	4e 5c       	subi	r20, 0xCE	; 206
     a96:	5f 4f       	sbci	r21, 0xFF	; 255
     a98:	46 17       	cp	r20, r22
     a9a:	57 07       	cpc	r21, r23
     a9c:	54 f0       	brlt	.+20     	; 0xab2 <Fill+0x304>
     a9e:	4f 52       	subi	r20, 0x2F	; 47
     aa0:	51 09       	sbc	r21, r1
     aa2:	48 17       	cp	r20, r24
     aa4:	59 07       	cpc	r21, r25
     aa6:	2c f0       	brlt	.+10     	; 0xab2 <Fill+0x304>
								  || Global_Weight_Left - Init_Grams_Left < Grams - 3)//4
     aa8:	23 50       	subi	r18, 0x03	; 3
     aaa:	31 09       	sbc	r19, r1
     aac:	82 17       	cp	r24, r18
     aae:	93 07       	cpc	r25, r19
     ab0:	34 f5       	brge	.+76     	; 0xafe <Fill+0x350>
	{
		Lcd4_Clear();
     ab2:	9f d5       	rcall	.+2878   	; 0x15f2 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9f d5       	rcall	.+2878   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow L");
     abe:	8d e1       	ldi	r24, 0x1D	; 29
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	1a d6       	rcall	.+3124   	; 0x16f8 <Lcd4_Write_String>
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	23 ed       	ldi	r18, 0xD3	; 211
     ac8:	80 e3       	ldi	r24, 0x30	; 48
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	20 40       	sbci	r18, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <Fill+0x31c>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <Fill+0x326>
     ad4:	00 00       	nop
		_delay_ms(2000);
		errorFill_L[countErrors_L] = countFill;
     ad6:	80 91 76 03 	lds	r24, 0x0376
     ada:	90 91 77 03 	lds	r25, 0x0377
     ade:	fc 01       	movw	r30, r24
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	e8 54       	subi	r30, 0x48	; 72
     ae6:	fc 4f       	sbci	r31, 0xFC	; 252
     ae8:	20 91 04 02 	lds	r18, 0x0204
     aec:	30 91 05 02 	lds	r19, 0x0205
     af0:	31 83       	std	Z+1, r19	; 0x01
     af2:	20 83       	st	Z, r18
		countErrors_L++;
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 77 03 	sts	0x0377, r25
     afa:	80 93 76 03 	sts	0x0376, r24
     afe:	8f e1       	ldi	r24, 0x1F	; 31
     b00:	9e e4       	ldi	r25, 0x4E	; 78
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <Fill+0x354>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <Fill+0x35a>
     b08:	00 00       	nop
	}
	_delay_ms(10);
	if (Sum_R - oldSum_R > Grams + 50 || Global_Weight_Right - Init_Grams_Right > Grams + 3//4
     b0a:	80 91 e8 03 	lds	r24, 0x03E8
     b0e:	90 91 e9 03 	lds	r25, 0x03E9
     b12:	40 91 e0 03 	lds	r20, 0x03E0
     b16:	50 91 e1 03 	lds	r21, 0x03E1
     b1a:	4c 1b       	sub	r20, r28
     b1c:	5d 0b       	sbc	r21, r29
     b1e:	9c 01       	movw	r18, r24
     b20:	2e 5c       	subi	r18, 0xCE	; 206
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	24 17       	cp	r18, r20
     b26:	35 07       	cpc	r19, r21
     b28:	84 f0       	brlt	.+32     	; 0xb4a <Fill+0x39c>
     b2a:	20 91 e4 03 	lds	r18, 0x03E4
     b2e:	30 91 e5 03 	lds	r19, 0x03E5
     b32:	2a 19       	sub	r18, r10
     b34:	3b 09       	sbc	r19, r11
     b36:	ac 01       	movw	r20, r24
     b38:	4d 5f       	subi	r20, 0xFD	; 253
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	42 17       	cp	r20, r18
     b3e:	53 07       	cpc	r21, r19
     b40:	24 f0       	brlt	.+8      	; 0xb4a <Fill+0x39c>
								  || Global_Weight_Right - Init_Grams_Right < Grams - 3)//4
     b42:	03 97       	sbiw	r24, 0x03	; 3
     b44:	28 17       	cp	r18, r24
     b46:	39 07       	cpc	r19, r25
     b48:	34 f5       	brge	.+76     	; 0xb96 <Fill+0x3e8>
	{
		Lcd4_Clear();
     b4a:	53 d5       	rcall	.+2726   	; 0x15f2 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	53 d5       	rcall	.+2726   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow R");
     b56:	8a e3       	ldi	r24, 0x3A	; 58
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	ce d5       	rcall	.+2972   	; 0x16f8 <Lcd4_Write_String>
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	23 ed       	ldi	r18, 0xD3	; 211
     b60:	80 e3       	ldi	r24, 0x30	; 48
     b62:	91 50       	subi	r25, 0x01	; 1
     b64:	20 40       	sbci	r18, 0x00	; 0
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	e1 f7       	brne	.-8      	; 0xb62 <Fill+0x3b4>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <Fill+0x3be>
     b6c:	00 00       	nop
		_delay_ms(2000);
		errorFill_R[countErrors_R] = countFill;
     b6e:	80 91 74 03 	lds	r24, 0x0374
     b72:	90 91 75 03 	lds	r25, 0x0375
     b76:	fc 01       	movw	r30, r24
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e0 57       	subi	r30, 0x70	; 112
     b7e:	fc 4f       	sbci	r31, 0xFC	; 252
     b80:	20 91 04 02 	lds	r18, 0x0204
     b84:	30 91 05 02 	lds	r19, 0x0205
     b88:	31 83       	std	Z+1, r19	; 0x01
     b8a:	20 83       	st	Z, r18
		countErrors_R++;
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 75 03 	sts	0x0375, r25
     b92:	80 93 74 03 	sts	0x0374, r24
	}
	countFill++;
     b96:	80 91 04 02 	lds	r24, 0x0204
     b9a:	90 91 05 02 	lds	r25, 0x0205
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	90 93 05 02 	sts	0x0205, r25
     ba4:	80 93 04 02 	sts	0x0204, r24
     ba8:	8f e1       	ldi	r24, 0x1F	; 31
     baa:	9e e4       	ldi	r25, 0x4E	; 78
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <Fill+0x3fe>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <Fill+0x404>
     bb2:	00 00       	nop
	//	Lcd4_Set_Cursor(2,0);
	//	Lcd4_Write_String(MyWeight);
	//	_delay_ms(4000);
	//}
	
	Lcd4_Clear();
     bb4:	1e d5       	rcall	.+2620   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	1e d5       	rcall	.+2620   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Fill Complete");
     bc0:	8c e2       	ldi	r24, 0x2C	; 44
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	99 d5       	rcall	.+2866   	; 0x16f8 <Lcd4_Write_String>
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	29 e6       	ldi	r18, 0x69	; 105
     bca:	88 e1       	ldi	r24, 0x18	; 24
     bcc:	91 50       	subi	r25, 0x01	; 1
     bce:	20 40       	sbci	r18, 0x00	; 0
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <Fill+0x41e>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <Fill+0x428>
     bd6:	00 00       	nop
	_delay_ms(1000);
	//PORTK = (1<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	08 95       	ret

00000bf0 <Go_To>:
		Lcd4_Set_Cursor(1,0);
		Lcd4_Write_String("Zero Set");
	}
} 
int Go_To (int X_Axis, int Y_Axis) //int STOP_X, int STOP_Y
{
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	8c 01       	movw	r16, r24
     c0c:	eb 01       	movw	r28, r22
	int flagdir = 0;
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
     c0e:	1c 16       	cp	r1, r28
     c10:	1d 06       	cpc	r1, r29
     c12:	0c f0       	brlt	.+2      	; 0xc16 <Go_To+0x26>
     c14:	46 c1       	rjmp	.+652    	; 0xea2 <Go_To+0x2b2>
	{
		if (STOP_Y == 0)// switch check 
     c16:	80 91 ea 03 	lds	r24, 0x03EA
     c1a:	90 91 eb 03 	lds	r25, 0x03EB
     c1e:	89 2b       	or	r24, r25
     c20:	09 f0       	breq	.+2      	; 0xc24 <Go_To+0x34>
     c22:	3f c1       	rjmp	.+638    	; 0xea2 <Go_To+0x2b2>
{
	int flagdir = 0;
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
     c24:	c1 2c       	mov	r12, r1
     c26:	d1 2c       	mov	r13, r1
     c28:	71 2c       	mov	r7, r1
	}
} 
int Go_To (int X_Axis, int Y_Axis) //int STOP_X, int STOP_Y
{
	int flagdir = 0;
	char Count = 0;
     c2a:	81 2c       	mov	r8, r1
		Lcd4_Write_String("Zero Set");
	}
} 
int Go_To (int X_Axis, int Y_Axis) //int STOP_X, int STOP_Y
{
	int flagdir = 0;
     c2c:	e1 2c       	mov	r14, r1
     c2e:	f1 2c       	mov	r15, r1
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     c30:	5b 01       	movw	r10, r22
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	a2 1a       	sub	r10, r18
     c36:	b1 08       	sbc	r11, r1
     c38:	42 c0       	rjmp	.+132    	; 0xcbe <Go_To+0xce>
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
	{
		if (STOP_Y == 0)// switch check 
     c3a:	80 91 ea 03 	lds	r24, 0x03EA
     c3e:	90 91 eb 03 	lds	r25, 0x03EB
     c42:	89 2b       	or	r24, r25
     c44:	09 f0       	breq	.+2      	; 0xc48 <Go_To+0x58>
     c46:	2d c1       	rjmp	.+602    	; 0xea2 <Go_To+0x2b2>
		{
			if (Ytemp == 0)
     c48:	77 20       	and	r7, r7
     c4a:	c1 f1       	breq	.+112    	; 0xcbc <Go_To+0xcc>
			{
				//nada 
			}
			else
			{
				if (Capacity == 1)
     c4c:	80 91 00 02 	lds	r24, 0x0200
     c50:	90 91 01 02 	lds	r25, 0x0201
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	81 f4       	brne	.+32     	; 0xc78 <Go_To+0x88>
				{
					if (Count == No_Cups - 1)
     c58:	29 2d       	mov	r18, r9
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	80 91 02 02 	lds	r24, 0x0202
     c60:	90 91 03 02 	lds	r25, 0x0203
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	28 17       	cp	r18, r24
     c68:	39 07       	cpc	r19, r25
     c6a:	09 f4       	brne	.+2      	; 0xc6e <Go_To+0x7e>
     c6c:	1a c1       	rjmp	.+564    	; 0xea2 <Go_To+0x2b2>
					{
						return;
					}
					Fill();
     c6e:	9f dd       	rcall	.-1218   	; 0x7ae <Fill>
					Count++;
     c70:	88 24       	eor	r8, r8
     c72:	83 94       	inc	r8
     c74:	89 0c       	add	r8, r9
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <Go_To+0xa6>
				}
				else
				{
					if (Count == No_Cups - 1)
     c78:	29 2d       	mov	r18, r9
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	80 91 02 02 	lds	r24, 0x0202
     c80:	90 91 03 02 	lds	r25, 0x0203
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	28 17       	cp	r18, r24
     c88:	39 07       	cpc	r19, r25
     c8a:	09 f4       	brne	.+2      	; 0xc8e <Go_To+0x9e>
     c8c:	0a c1       	rjmp	.+532    	; 0xea2 <Go_To+0x2b2>
					{
						return;
					}
					FillHalf();
     c8e:	87 dc       	rcall	.-1778   	; 0x59e <FillHalf>
					Count++;
     c90:	88 24       	eor	r8, r8
     c92:	83 94       	inc	r8
     c94:	89 0c       	add	r8, r9
				}
				if (Y_Axis < 5)//X_Axis < 3
     c96:	c5 30       	cpi	r28, 0x05	; 5
     c98:	d1 05       	cpc	r29, r1
     c9a:	14 f4       	brge	.+4      	; 0xca0 <Go_To+0xb0>
				{
					Y_Axis_Big_Step_Plus();
     c9c:	38 db       	rcall	.-2448   	; 0x30e <Y_Axis_Big_Step_Plus>
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Go_To+0xb2>
				}
				else
				{
					Y_Axis_Step_Plus();
     ca0:	a1 da       	rcall	.-2750   	; 0x1e4 <Y_Axis_Step_Plus>
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	94 e3       	ldi	r25, 0x34	; 52
     ca6:	2c e0       	ldi	r18, 0x0C	; 12
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	20 40       	sbci	r18, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <Go_To+0xb8>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <Go_To+0xc2>
     cb2:	00 00       	nop
				}
				_delay_ms(500);
				flagdir++;
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	e8 1a       	sub	r14, r24
     cb8:	f8 0a       	sbc	r15, r24
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <Go_To+0xce>
     cbc:	89 2c       	mov	r8, r9
		{
			//STOP_Y = 0;
			return;
		} 
		
		if (flagdir % 2)// switch direction
     cbe:	e0 fc       	sbrc	r14, 0
     cc0:	0f c0       	rjmp	.+30     	; 0xce0 <Go_To+0xf0>
				}
			}
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     cc2:	10 16       	cp	r1, r16
     cc4:	11 06       	cpc	r1, r17
     cc6:	0c f0       	brlt	.+2      	; 0xcca <Go_To+0xda>
     cc8:	bf c0       	rjmp	.+382    	; 0xe48 <Go_To+0x258>
			{
				if (STOP_X == 0)
     cca:	80 91 ec 03 	lds	r24, 0x03EC
     cce:	90 91 ed 03 	lds	r25, 0x03ED
     cd2:	89 2b       	or	r24, r25
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <Go_To+0xe8>
     cd6:	e5 c0       	rjmp	.+458    	; 0xea2 <Go_To+0x2b2>
     cd8:	99 24       	eor	r9, r9
     cda:	93 94       	inc	r9
     cdc:	98 0c       	add	r9, r8
     cde:	7e c0       	rjmp	.+252    	; 0xddc <Go_To+0x1ec>
			return;
		} 
		
		if (flagdir % 2)// switch direction
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     ce0:	10 16       	cp	r1, r16
     ce2:	11 06       	cpc	r1, r17
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <Go_To+0xf8>
     ce6:	49 c0       	rjmp	.+146    	; 0xd7a <Go_To+0x18a>
			{
				if (STOP_X == 0)
     ce8:	80 91 ec 03 	lds	r24, 0x03EC
     cec:	90 91 ed 03 	lds	r25, 0x03ED
     cf0:	89 2b       	or	r24, r25
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <Go_To+0x106>
     cf4:	d6 c0       	rjmp	.+428    	; 0xea2 <Go_To+0x2b2>
     cf6:	99 24       	eor	r9, r9
     cf8:	93 94       	inc	r9
     cfa:	98 0c       	add	r9, r8
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <Go_To+0x11e>
     cfe:	93 94       	inc	r9
     d00:	80 91 ec 03 	lds	r24, 0x03EC
     d04:	90 91 ed 03 	lds	r25, 0x03ED
     d08:	89 2b       	or	r24, r25
     d0a:	09 f0       	breq	.+2      	; 0xd0e <Go_To+0x11e>
     d0c:	ca c0       	rjmp	.+404    	; 0xea2 <Go_To+0x2b2>
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	29 0d       	add	r18, r9
				{
					if (Capacity == 1)
     d12:	80 91 00 02 	lds	r24, 0x0200
     d16:	90 91 01 02 	lds	r25, 0x0201
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	61 f4       	brne	.+24     	; 0xd36 <Go_To+0x146>
					{
						if (Count == No_Cups - 1)
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	80 91 02 02 	lds	r24, 0x0202
     d24:	90 91 03 02 	lds	r25, 0x0203
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	28 17       	cp	r18, r24
     d2c:	39 07       	cpc	r19, r25
     d2e:	09 f4       	brne	.+2      	; 0xd32 <Go_To+0x142>
     d30:	b8 c0       	rjmp	.+368    	; 0xea2 <Go_To+0x2b2>
						{
							return;
						}
						Fill();
     d32:	3d dd       	rcall	.-1414   	; 0x7ae <Fill>
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <Go_To+0x15c>
						Count++;
					}
					else
					{
						if (Count == No_Cups - 1)
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	80 91 02 02 	lds	r24, 0x0202
     d3c:	90 91 03 02 	lds	r25, 0x0203
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	09 f4       	brne	.+2      	; 0xd4a <Go_To+0x15a>
     d48:	ac c0       	rjmp	.+344    	; 0xea2 <Go_To+0x2b2>
						{
							return;
						}
						FillHalf();
     d4a:	29 dc       	rcall	.-1966   	; 0x59e <FillHalf>
						Count++;
					}
					if (Y_Axis < 5)
     d4c:	c5 30       	cpi	r28, 0x05	; 5
     d4e:	d1 05       	cpc	r29, r1
     d50:	14 f4       	brge	.+4      	; 0xd56 <Go_To+0x166>
					{
						X_Axis_Big_Step_Minus();
     d52:	c1 da       	rcall	.-2686   	; 0x2d6 <X_Axis_Big_Step_Minus>
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <Go_To+0x168>
					}
					else
					{
						X_Axis_Step_Minus();
     d56:	2a da       	rcall	.-2988   	; 0x1ac <X_Axis_Step_Minus>
     d58:	9f ef       	ldi	r25, 0xFF	; 255
     d5a:	24 e3       	ldi	r18, 0x34	; 52
     d5c:	8c e0       	ldi	r24, 0x0C	; 12
     d5e:	91 50       	subi	r25, 0x01	; 1
     d60:	20 40       	sbci	r18, 0x00	; 0
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <Go_To+0x16e>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <Go_To+0x178>
     d68:	00 00       	nop
			return;
		} 
		
		if (flagdir % 2)// switch direction
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     d6a:	89 2d       	mov	r24, r9
     d6c:	88 19       	sub	r24, r8
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	80 17       	cp	r24, r16
     d72:	91 07       	cpc	r25, r17
     d74:	0c f4       	brge	.+2      	; 0xd78 <Go_To+0x188>
     d76:	c3 cf       	rjmp	.-122    	; 0xcfe <Go_To+0x10e>
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <Go_To+0x190>
     d7a:	98 2c       	mov	r9, r8
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     d80:	80 17       	cp	r24, r16
     d82:	91 07       	cpc	r25, r17
     d84:	09 f0       	breq	.+2      	; 0xd88 <Go_To+0x198>
     d86:	86 c0       	rjmp	.+268    	; 0xe94 <Go_To+0x2a4>
     d88:	ca 14       	cp	r12, r10
     d8a:	db 04       	cpc	r13, r11
     d8c:	09 f0       	breq	.+2      	; 0xd90 <Go_To+0x1a0>
     d8e:	82 c0       	rjmp	.+260    	; 0xe94 <Go_To+0x2a4>
			{
				Lcd4_Clear();
     d90:	30 d4       	rcall	.+2144   	; 0x15f2 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	30 d4       	rcall	.+2144   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String("IN Axis Minus");
     d9c:	89 e4       	ldi	r24, 0x49	; 73
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	ab d4       	rcall	.+2390   	; 0x16f8 <Lcd4_Write_String>
     da2:	9f ef       	ldi	r25, 0xFF	; 255
     da4:	23 ed       	ldi	r18, 0xD3	; 211
     da6:	80 e3       	ldi	r24, 0x30	; 48
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	20 40       	sbci	r18, 0x00	; 0
     dac:	80 40       	sbci	r24, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <Go_To+0x1b8>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <Go_To+0x1c2>
     db2:	00 00       	nop
				_delay_ms(2000);
				if (Capacity == 1)
     db4:	80 91 00 02 	lds	r24, 0x0200
     db8:	90 91 01 02 	lds	r25, 0x0201
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <Go_To+0x1d6>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					Fill();
     dc0:	f6 dc       	rcall	.-1556   	; 0x7ae <Fill>
					Count++;
     dc2:	93 94       	inc	r9
     dc4:	67 c0       	rjmp	.+206    	; 0xe94 <Go_To+0x2a4>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					FillHalf();
     dc6:	eb db       	rcall	.-2090   	; 0x59e <FillHalf>
					Count++;
     dc8:	93 94       	inc	r9
     dca:	64 c0       	rjmp	.+200    	; 0xe94 <Go_To+0x2a4>
     dcc:	93 94       	inc	r9
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
			{
				if (STOP_X == 0)
     dce:	80 91 ec 03 	lds	r24, 0x03EC
     dd2:	90 91 ed 03 	lds	r25, 0x03ED
     dd6:	89 2b       	or	r24, r25
     dd8:	09 f0       	breq	.+2      	; 0xddc <Go_To+0x1ec>
     dda:	63 c0       	rjmp	.+198    	; 0xea2 <Go_To+0x2b2>
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	29 0d       	add	r18, r9
				{
					if (Capacity == 1)
     de0:	80 91 00 02 	lds	r24, 0x0200
     de4:	90 91 01 02 	lds	r25, 0x0201
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	61 f4       	brne	.+24     	; 0xe04 <Go_To+0x214>
					{
						if (Count == No_Cups - 1)
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	80 91 02 02 	lds	r24, 0x0202
     df2:	90 91 03 02 	lds	r25, 0x0203
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	28 17       	cp	r18, r24
     dfa:	39 07       	cpc	r19, r25
     dfc:	09 f4       	brne	.+2      	; 0xe00 <Go_To+0x210>
     dfe:	51 c0       	rjmp	.+162    	; 0xea2 <Go_To+0x2b2>
						{
							return;
						}
						Fill();
     e00:	d6 dc       	rcall	.-1620   	; 0x7ae <Fill>
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <Go_To+0x22a>
						Count++;
					}
					else
					{
						if (Count == No_Cups - 1)
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	80 91 02 02 	lds	r24, 0x0202
     e0a:	90 91 03 02 	lds	r25, 0x0203
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	09 f4       	brne	.+2      	; 0xe18 <Go_To+0x228>
     e16:	45 c0       	rjmp	.+138    	; 0xea2 <Go_To+0x2b2>
						{
							return;
						}
						FillHalf();
     e18:	c2 db       	rcall	.-2172   	; 0x59e <FillHalf>
						Count++;
					}
					if (Y_Axis < 5)
     e1a:	c5 30       	cpi	r28, 0x05	; 5
     e1c:	d1 05       	cpc	r29, r1
     e1e:	14 f4       	brge	.+4      	; 0xe24 <Go_To+0x234>
					{
						X_Axis_Big_Step_Plus();
     e20:	3e da       	rcall	.-2948   	; 0x29e <X_Axis_Big_Step_Plus>
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <Go_To+0x236>
					}
					else
					{
						X_Axis_Step_Plus();
     e24:	a7 d9       	rcall	.-3250   	; 0x174 <X_Axis_Step_Plus>
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	24 e3       	ldi	r18, 0x34	; 52
     e2a:	8c e0       	ldi	r24, 0x0C	; 12
     e2c:	91 50       	subi	r25, 0x01	; 1
     e2e:	20 40       	sbci	r18, 0x00	; 0
     e30:	80 40       	sbci	r24, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <Go_To+0x23c>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <Go_To+0x246>
     e36:	00 00       	nop
				}
			}
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     e38:	89 2d       	mov	r24, r9
     e3a:	88 19       	sub	r24, r8
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	80 17       	cp	r24, r16
     e40:	91 07       	cpc	r25, r17
     e42:	0c f4       	brge	.+2      	; 0xe46 <Go_To+0x256>
     e44:	c3 cf       	rjmp	.-122    	; 0xdcc <Go_To+0x1dc>
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <Go_To+0x25e>
     e48:	98 2c       	mov	r9, r8
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     e4e:	08 17       	cp	r16, r24
     e50:	19 07       	cpc	r17, r25
     e52:	01 f5       	brne	.+64     	; 0xe94 <Go_To+0x2a4>
     e54:	ca 14       	cp	r12, r10
     e56:	db 04       	cpc	r13, r11
     e58:	e9 f4       	brne	.+58     	; 0xe94 <Go_To+0x2a4>
			{
				Lcd4_Clear();
     e5a:	cb d3       	rcall	.+1942   	; 0x15f2 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	cb d3       	rcall	.+1942   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String("IN Axis Plus");
     e66:	87 e5       	ldi	r24, 0x57	; 87
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	46 d4       	rcall	.+2188   	; 0x16f8 <Lcd4_Write_String>
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	23 ed       	ldi	r18, 0xD3	; 211
     e70:	80 e3       	ldi	r24, 0x30	; 48
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	20 40       	sbci	r18, 0x00	; 0
     e76:	80 40       	sbci	r24, 0x00	; 0
     e78:	e1 f7       	brne	.-8      	; 0xe72 <Go_To+0x282>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <Go_To+0x28c>
     e7c:	00 00       	nop
				_delay_ms(2000);
				if (Capacity == 1)
     e7e:	80 91 00 02 	lds	r24, 0x0200
     e82:	90 91 01 02 	lds	r25, 0x0201
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	19 f4       	brne	.+6      	; 0xe90 <Go_To+0x2a0>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					Fill();
     e8a:	91 dc       	rcall	.-1758   	; 0x7ae <Fill>
					Count++;
     e8c:	93 94       	inc	r9
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <Go_To+0x2a4>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					FillHalf();
     e90:	86 db       	rcall	.-2292   	; 0x59e <FillHalf>
					Count++;
     e92:	93 94       	inc	r9
{
	int flagdir = 0;
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
     e94:	73 94       	inc	r7
     e96:	c7 2c       	mov	r12, r7
     e98:	d1 2c       	mov	r13, r1
     e9a:	cc 16       	cp	r12, r28
     e9c:	dd 06       	cpc	r13, r29
     e9e:	0c f4       	brge	.+2      	; 0xea2 <Go_To+0x2b2>
     ea0:	cc ce       	rjmp	.-616    	; 0xc3a <Go_To+0x4a>
			}
		}
	}
	return;
	
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	7f 90       	pop	r7
     ebc:	08 95       	ret

00000ebe <SetWeight>:
	_delay_ms(1000);
	//PORTK = (1<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}

void SetWeight(void)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
	Lcd4_Clear();
     ec2:	97 d3       	rcall	.+1838   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	97 d3       	rcall	.+1838   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Weight:");
     ece:	8a ed       	ldi	r24, 0xDA	; 218
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	12 d4       	rcall	.+2084   	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	8f d3       	rcall	.+1822   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("0");
     ede:	8b e6       	ldi	r24, 0x6B	; 107
     ee0:	92 e0       	ldi	r25, 0x02	; 2
     ee2:	0a d4       	rcall	.+2068   	; 0x16f8 <Lcd4_Write_String>
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
     ee4:	c9 e0       	ldi	r28, 0x09	; 9
     ee6:	d1 e0       	ldi	r29, 0x01	; 1
     ee8:	88 81       	ld	r24, Y
     eea:	85 ff       	sbrs	r24, 5
     eec:	1f c0       	rjmp	.+62     	; 0xf2c <SetWeight+0x6e>
		{
			if (Gram_Target >= 160)
     eee:	80 91 72 03 	lds	r24, 0x0372
     ef2:	90 91 73 03 	lds	r25, 0x0373
     ef6:	80 3a       	cpi	r24, 0xA0	; 160
     ef8:	91 05       	cpc	r25, r1
     efa:	5c f0       	brlt	.+22     	; 0xf12 <SetWeight+0x54>
			{
				X_Axis = 3;//velike case
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	90 93 f2 03 	sts	0x03F2, r25
     f04:	80 93 f1 03 	sts	0x03F1, r24
				Y_Axis = 3;//3 bilo
     f08:	90 93 f0 03 	sts	0x03F0, r25
     f0c:	80 93 ef 03 	sts	0x03EF, r24
     f10:	66 c0       	rjmp	.+204    	; 0xfde <SetWeight+0x120>
			}
			else 
			{
				X_Axis = 3;//male case
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 f2 03 	sts	0x03F2, r25
     f1a:	80 93 f1 03 	sts	0x03F1, r24
				Y_Axis = 5;
     f1e:	85 e0       	ldi	r24, 0x05	; 5
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 f0 03 	sts	0x03F0, r25
     f26:	80 93 ef 03 	sts	0x03EF, r24
     f2a:	59 c0       	rjmp	.+178    	; 0xfde <SetWeight+0x120>
			}
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
     f2c:	88 81       	ld	r24, Y
     f2e:	86 ff       	sbrs	r24, 6
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <SetWeight+0xc6>
		{
			Gram_Target = Gram_Target + 5;
     f32:	80 91 72 03 	lds	r24, 0x0372
     f36:	90 91 73 03 	lds	r25, 0x0373
     f3a:	05 96       	adiw	r24, 0x05	; 5
     f3c:	90 93 73 03 	sts	0x0373, r25
     f40:	80 93 72 03 	sts	0x0372, r24
     f44:	4a e0       	ldi	r20, 0x0A	; 10
     f46:	63 ef       	ldi	r22, 0xF3	; 243
     f48:	73 e0       	ldi	r23, 0x03	; 3
     f4a:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
			itoa(Gram_Target, MyWeight, 10);
			Lcd4_Clear();
     f4e:	51 d3       	rcall	.+1698   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	51 d3       	rcall	.+1698   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Weight:");
     f5a:	8a ed       	ldi	r24, 0xDA	; 218
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	cc d3       	rcall	.+1944   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	49 d3       	rcall	.+1682   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
     f6a:	83 ef       	ldi	r24, 0xF3	; 243
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	c4 d3       	rcall	.+1928   	; 0x16f8 <Lcd4_Write_String>
     f70:	2f ef       	ldi	r18, 0xFF	; 255
     f72:	82 e5       	ldi	r24, 0x52	; 82
     f74:	97 e0       	ldi	r25, 0x07	; 7
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	80 40       	sbci	r24, 0x00	; 0
     f7a:	90 40       	sbci	r25, 0x00	; 0
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <SetWeight+0xb8>
     f7e:	00 c0       	rjmp	.+0      	; 0xf80 <SetWeight+0xc2>
     f80:	00 00       	nop
     f82:	b2 cf       	rjmp	.-156    	; 0xee8 <SetWeight+0x2a>
			_delay_ms(300);//700 
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
     f84:	88 81       	ld	r24, Y
     f86:	88 23       	and	r24, r24
     f88:	0c f0       	brlt	.+2      	; 0xf8c <SetWeight+0xce>
     f8a:	ae cf       	rjmp	.-164    	; 0xee8 <SetWeight+0x2a>
		{
			Gram_Target = Gram_Target - 5;
     f8c:	80 91 72 03 	lds	r24, 0x0372
     f90:	90 91 73 03 	lds	r25, 0x0373
     f94:	05 97       	sbiw	r24, 0x05	; 5
     f96:	90 93 73 03 	sts	0x0373, r25
     f9a:	80 93 72 03 	sts	0x0372, r24
     f9e:	4a e0       	ldi	r20, 0x0A	; 10
     fa0:	63 ef       	ldi	r22, 0xF3	; 243
     fa2:	73 e0       	ldi	r23, 0x03	; 3
     fa4:	0e 94 2f 10 	call	0x205e	; 0x205e <__itoa_ncheck>
			itoa(Gram_Target, MyWeight, 10);
			Lcd4_Clear();
     fa8:	24 d3       	rcall	.+1608   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	24 d3       	rcall	.+1608   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Weight:");
     fb4:	8a ed       	ldi	r24, 0xDA	; 218
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	9f d3       	rcall	.+1854   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	1c d3       	rcall	.+1592   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
     fc4:	83 ef       	ldi	r24, 0xF3	; 243
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	97 d3       	rcall	.+1838   	; 0x16f8 <Lcd4_Write_String>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	82 e5       	ldi	r24, 0x52	; 82
     fce:	97 e0       	ldi	r25, 0x07	; 7
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <SetWeight+0x112>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <SetWeight+0x11c>
     fda:	00 00       	nop
     fdc:	85 cf       	rjmp	.-246    	; 0xee8 <SetWeight+0x2a>
			_delay_ms(300);//700
		}
	}
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <SetCups>:
void SetCups(void)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
	Lcd4_Clear();
     fe8:	04 d3       	rcall	.+1544   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	04 d3       	rcall	.+1544   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Cups:");
     ff4:	84 e6       	ldi	r24, 0x64	; 100
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	7f d3       	rcall	.+1790   	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc d2       	rcall	.+1528   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("20");
    1004:	8a e6       	ldi	r24, 0x6A	; 106
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	77 d3       	rcall	.+1774   	; 0x16f8 <Lcd4_Write_String>
	if (Y_Axis < 5)
    100a:	80 91 ef 03 	lds	r24, 0x03EF
    100e:	90 91 f0 03 	lds	r25, 0x03F0
    1012:	05 97       	sbiw	r24, 0x05	; 5
    1014:	bc f4       	brge	.+46     	; 0x1044 <SetCups+0x60>
	{
		No_Cups = 12;
    1016:	8c e0       	ldi	r24, 0x0C	; 12
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	90 93 03 02 	sts	0x0203, r25
    101e:	80 93 02 02 	sts	0x0202, r24
		Lcd4_Clear();
    1022:	e7 d2       	rcall	.+1486   	; 0x15f2 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	e7 d2       	rcall	.+1486   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Cups:");
    102e:	84 e6       	ldi	r24, 0x64	; 100
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	62 d3       	rcall	.+1732   	; 0x16f8 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	df d2       	rcall	.+1470   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("12");
    103e:	8d e6       	ldi	r24, 0x6D	; 109
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	5a d3       	rcall	.+1716   	; 0x16f8 <Lcd4_Write_String>
	}
	
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
    1044:	c9 e0       	ldi	r28, 0x09	; 9
    1046:	d1 e0       	ldi	r29, 0x01	; 1
    1048:	88 81       	ld	r24, Y
    104a:	85 fd       	sbrc	r24, 5
    104c:	56 c0       	rjmp	.+172    	; 0x10fa <SetCups+0x116>
		{
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
    104e:	88 81       	ld	r24, Y
    1050:	86 ff       	sbrs	r24, 6
    1052:	28 c0       	rjmp	.+80     	; 0x10a4 <SetCups+0xc0>
		{
			No_Cups = No_Cups + 1;
    1054:	80 91 02 02 	lds	r24, 0x0202
    1058:	90 91 03 02 	lds	r25, 0x0203
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	90 93 03 02 	sts	0x0203, r25
    1062:	80 93 02 02 	sts	0x0202, r24
    1066:	4a e0       	ldi	r20, 0x0A	; 10
    1068:	63 ef       	ldi	r22, 0xF3	; 243
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	f8 d7       	rcall	.+4080   	; 0x205e <__itoa_ncheck>
			itoa(No_Cups, MyWeight, 10);
			Lcd4_Clear();
    106e:	c1 d2       	rcall	.+1410   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	c1 d2       	rcall	.+1410   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Cups:");
    107a:	84 e6       	ldi	r24, 0x64	; 100
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	3c d3       	rcall	.+1656   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	b9 d2       	rcall	.+1394   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
    108a:	83 ef       	ldi	r24, 0xF3	; 243
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	34 d3       	rcall	.+1640   	; 0x16f8 <Lcd4_Write_String>
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	82 e5       	ldi	r24, 0x52	; 82
    1094:	97 e0       	ldi	r25, 0x07	; 7
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <SetCups+0xb2>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <SetCups+0xbc>
    10a0:	00 00       	nop
    10a2:	d2 cf       	rjmp	.-92     	; 0x1048 <SetCups+0x64>
			_delay_ms(300);//700
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
    10a4:	88 81       	ld	r24, Y
    10a6:	88 23       	and	r24, r24
    10a8:	7c f6       	brge	.-98     	; 0x1048 <SetCups+0x64>
		{
			No_Cups = No_Cups - 1;
    10aa:	80 91 02 02 	lds	r24, 0x0202
    10ae:	90 91 03 02 	lds	r25, 0x0203
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	90 93 03 02 	sts	0x0203, r25
    10b8:	80 93 02 02 	sts	0x0202, r24
    10bc:	4a e0       	ldi	r20, 0x0A	; 10
    10be:	63 ef       	ldi	r22, 0xF3	; 243
    10c0:	73 e0       	ldi	r23, 0x03	; 3
    10c2:	cd d7       	rcall	.+3994   	; 0x205e <__itoa_ncheck>
			itoa(No_Cups, MyWeight, 10);
			Lcd4_Clear();
    10c4:	96 d2       	rcall	.+1324   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	96 d2       	rcall	.+1324   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Cups:");
    10d0:	84 e6       	ldi	r24, 0x64	; 100
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	11 d3       	rcall	.+1570   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	8e d2       	rcall	.+1308   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
    10e0:	83 ef       	ldi	r24, 0xF3	; 243
    10e2:	93 e0       	ldi	r25, 0x03	; 3
    10e4:	09 d3       	rcall	.+1554   	; 0x16f8 <Lcd4_Write_String>
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	82 e5       	ldi	r24, 0x52	; 82
    10ea:	97 e0       	ldi	r25, 0x07	; 7
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <SetCups+0x108>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <SetCups+0x112>
    10f6:	00 00       	nop
    10f8:	a7 cf       	rjmp	.-178    	; 0x1048 <SetCups+0x64>
			_delay_ms(300);//700
		}
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <SetCapacity>:
void SetCapacity(void)
{
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
	Lcd4_Clear();
    1104:	76 d2       	rcall	.+1260   	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	76 d2       	rcall	.+1260   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Capacity:");
    1110:	80 e7       	ldi	r24, 0x70	; 112
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	f1 d2       	rcall	.+1506   	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	6e d2       	rcall	.+1244   	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Full");
    1120:	8a e7       	ldi	r24, 0x7A	; 122
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	e9 d2       	rcall	.+1490   	; 0x16f8 <Lcd4_Write_String>
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
    1126:	c9 e0       	ldi	r28, 0x09	; 9
    1128:	d1 e0       	ldi	r29, 0x01	; 1
    112a:	88 81       	ld	r24, Y
    112c:	85 fd       	sbrc	r24, 5
    112e:	46 c0       	rjmp	.+140    	; 0x11bc <SetCapacity+0xbc>
		{
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
    1130:	88 81       	ld	r24, Y
    1132:	86 ff       	sbrs	r24, 6
    1134:	21 c0       	rjmp	.+66     	; 0x1178 <SetCapacity+0x78>
		{
			Capacity = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	90 93 01 02 	sts	0x0201, r25
    113e:	80 93 00 02 	sts	0x0200, r24
			Lcd4_Clear();
    1142:	57 d2       	rcall	.+1198   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	57 d2       	rcall	.+1198   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Capacity:");
    114e:	80 e7       	ldi	r24, 0x70	; 112
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	d2 d2       	rcall	.+1444   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	4f d2       	rcall	.+1182   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Full");
    115e:	8a e7       	ldi	r24, 0x7A	; 122
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	ca d2       	rcall	.+1428   	; 0x16f8 <Lcd4_Write_String>
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	82 e5       	ldi	r24, 0x52	; 82
    1168:	97 e0       	ldi	r25, 0x07	; 7
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	e1 f7       	brne	.-8      	; 0x116a <SetCapacity+0x6a>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <SetCapacity+0x74>
    1174:	00 00       	nop
    1176:	d9 cf       	rjmp	.-78     	; 0x112a <SetCapacity+0x2a>
			_delay_ms(300);//700
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
    1178:	88 81       	ld	r24, Y
    117a:	88 23       	and	r24, r24
    117c:	b4 f6       	brge	.-84     	; 0x112a <SetCapacity+0x2a>
		{
			Capacity = 0;
    117e:	10 92 01 02 	sts	0x0201, r1
    1182:	10 92 00 02 	sts	0x0200, r1
			Lcd4_Clear();
    1186:	35 d2       	rcall	.+1130   	; 0x15f2 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	35 d2       	rcall	.+1130   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Capacity:");
    1192:	80 e7       	ldi	r24, 0x70	; 112
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	b0 d2       	rcall	.+1376   	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	2d d2       	rcall	.+1114   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("Half");
    11a2:	8f e7       	ldi	r24, 0x7F	; 127
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	a8 d2       	rcall	.+1360   	; 0x16f8 <Lcd4_Write_String>
    11a8:	2f ef       	ldi	r18, 0xFF	; 255
    11aa:	82 e5       	ldi	r24, 0x52	; 82
    11ac:	97 e0       	ldi	r25, 0x07	; 7
    11ae:	21 50       	subi	r18, 0x01	; 1
    11b0:	80 40       	sbci	r24, 0x00	; 0
    11b2:	90 40       	sbci	r25, 0x00	; 0
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <SetCapacity+0xae>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <SetCapacity+0xb8>
    11b8:	00 00       	nop
    11ba:	b7 cf       	rjmp	.-146    	; 0x112a <SetCapacity+0x2a>
			_delay_ms(300);//700
		}
	}
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <Hardware_Init>:
}
unsigned char USART_Receive( void )
{
	while ( !(UCSR0A & (1<<RXC0)) );         // Wait for data to be received
	return UDR0;                             // Get and return received data from buffer
}
    11c2:	9f ef       	ldi	r25, 0xFF	; 255
    11c4:	97 b9       	out	0x07, r25	; 7
    11c6:	90 93 04 01 	sts	0x0104, r25
    11ca:	81 ee       	ldi	r24, 0xE1	; 225
    11cc:	80 93 0a 01 	sts	0x010A, r24
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 0b 01 	sts	0x010B, r24
    11d6:	90 93 07 01 	sts	0x0107, r25
    11da:	10 92 08 01 	sts	0x0108, r1
    11de:	90 bb       	out	0x10, r25	; 16
    11e0:	11 ba       	out	0x11, r1	; 17
    11e2:	84 b9       	out	0x04, r24	; 4
    11e4:	85 b9       	out	0x05, r24	; 5
    11e6:	8d b9       	out	0x0d, r24	; 13
    11e8:	8e b9       	out	0x0e, r24	; 14
    11ea:	08 95       	ret

000011ec <USART_Init>:
    11ec:	e1 e6       	ldi	r30, 0x61	; 97
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 e8       	ldi	r24, 0x80	; 128
    11f2:	80 83       	st	Z, r24
    11f4:	10 82       	st	Z, r1
    11f6:	08 95       	ret

000011f8 <InitTimer1>:
void InitTimer1()// MOTOR X
{
	//sei();
	//cli();//clear, off interrupt
	
	TCCR1A = 0x80;//8k
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0x09;
    11fe:	89 e0       	ldi	r24, 0x09	; 9
    1200:	80 93 81 00 	sts	0x0081, r24
	OCR1AH = 0x03;
    1204:	83 e0       	ldi	r24, 0x03	; 3
    1206:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xE7;
    120a:	87 ee       	ldi	r24, 0xE7	; 231
    120c:	80 93 88 00 	sts	0x0088, r24
	//OCR1A = 65000;
	//OCR1AH = 0x01;
	//OCR1AL = 0x8F;
	//OCR1AH = 0x00;
	//OCR1AL = 0x00;
	TIMSK1 |= (1 << OCIE1A);//set
    1210:	ef e6       	ldi	r30, 0x6F	; 111
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	82 60       	ori	r24, 0x02	; 2
    1218:	80 83       	st	Z, r24
	//TCCR1B |= (1 << CS10);// set up timer with prescaler = 0
	TCNT1 = 0;// initialize counter
    121a:	10 92 85 00 	sts	0x0085, r1
    121e:	10 92 84 00 	sts	0x0084, r1
    1222:	08 95       	ret

00001224 <InitTimer3>:
	//TIMSK1 |= (1 << TOIE1);// enable overflow interrupt
}
void InitTimer3()// MOTOR Y
{
	TCCR3A = 0x80;//400hz
    1224:	80 e8       	ldi	r24, 0x80	; 128
    1226:	80 93 90 00 	sts	0x0090, r24
	TCCR3B = 0x0C;
    122a:	8c e0       	ldi	r24, 0x0C	; 12
    122c:	80 93 91 00 	sts	0x0091, r24
	OCR3AH = 0x00;
    1230:	10 92 99 00 	sts	0x0099, r1
	OCR3AL = 0x4D;
    1234:	8d e4       	ldi	r24, 0x4D	; 77
    1236:	80 93 98 00 	sts	0x0098, r24
	TIMSK3 |= (1 << OCIE3A);
    123a:	e1 e7       	ldi	r30, 0x71	; 113
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	82 60       	ori	r24, 0x02	; 2
    1242:	80 83       	st	Z, r24
	TCNT3 = 0;// initialize counter
    1244:	10 92 95 00 	sts	0x0095, r1
    1248:	10 92 94 00 	sts	0x0094, r1
    124c:	08 95       	ret

0000124e <InitTimer4>:
}
void InitTimer4 ()
{
	TCCR4A = 0x80;
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	80 93 a0 00 	sts	0x00A0, r24
	TCCR4B = 0x0D;
    1254:	8d e0       	ldi	r24, 0x0D	; 13
    1256:	80 93 a1 00 	sts	0x00A1, r24
	OCR4AH = 0x00;
    125a:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x9B;
    125e:	8b e9       	ldi	r24, 0x9B	; 155
    1260:	80 93 a8 00 	sts	0x00A8, r24
	TIMSK4 |= (1 << OCIE4A);//set
    1264:	e2 e7       	ldi	r30, 0x72	; 114
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	82 60       	ori	r24, 0x02	; 2
    126c:	80 83       	st	Z, r24
	TCNT4 = 0;
    126e:	10 92 a5 00 	sts	0x00A5, r1
    1272:	10 92 a4 00 	sts	0x00A4, r1
    1276:	08 95       	ret

00001278 <pinChange>:
    1278:	67 2b       	or	r22, r23
    127a:	09 f0       	breq	.+2      	; 0x127e <pinChange+0x6>
    127c:	b1 c0       	rjmp	.+354    	; 0x13e0 <pinChange+0x168>
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	11 f4       	brne	.+4      	; 0x1286 <pinChange+0xe>
    1282:	10 98       	cbi	0x02, 0	; 2
    1284:	08 95       	ret
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	11 f4       	brne	.+4      	; 0x1290 <pinChange+0x18>
    128c:	11 98       	cbi	0x02, 1	; 2
    128e:	08 95       	ret
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	11 f4       	brne	.+4      	; 0x129a <pinChange+0x22>
    1296:	12 98       	cbi	0x02, 2	; 2
    1298:	08 95       	ret
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	11 f4       	brne	.+4      	; 0x12a4 <pinChange+0x2c>
    12a0:	13 98       	cbi	0x02, 3	; 2
    12a2:	08 95       	ret
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	91 05       	cpc	r25, r1
    12a8:	11 f4       	brne	.+4      	; 0x12ae <pinChange+0x36>
    12aa:	14 98       	cbi	0x02, 4	; 2
    12ac:	08 95       	ret
    12ae:	85 30       	cpi	r24, 0x05	; 5
    12b0:	91 05       	cpc	r25, r1
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <pinChange+0x40>
    12b4:	15 98       	cbi	0x02, 5	; 2
    12b6:	08 95       	ret
    12b8:	86 30       	cpi	r24, 0x06	; 6
    12ba:	91 05       	cpc	r25, r1
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <pinChange+0x4a>
    12be:	16 98       	cbi	0x02, 6	; 2
    12c0:	08 95       	ret
    12c2:	87 30       	cpi	r24, 0x07	; 7
    12c4:	91 05       	cpc	r25, r1
    12c6:	11 f4       	brne	.+4      	; 0x12cc <pinChange+0x54>
    12c8:	17 98       	cbi	0x02, 7	; 2
    12ca:	08 95       	ret
    12cc:	8a 30       	cpi	r24, 0x0A	; 10
    12ce:	91 05       	cpc	r25, r1
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <pinChange+0x5e>
    12d2:	28 98       	cbi	0x05, 0	; 5
    12d4:	08 95       	ret
    12d6:	8b 30       	cpi	r24, 0x0B	; 11
    12d8:	91 05       	cpc	r25, r1
    12da:	11 f4       	brne	.+4      	; 0x12e0 <pinChange+0x68>
    12dc:	29 98       	cbi	0x05, 1	; 5
    12de:	08 95       	ret
    12e0:	8c 30       	cpi	r24, 0x0C	; 12
    12e2:	91 05       	cpc	r25, r1
    12e4:	11 f4       	brne	.+4      	; 0x12ea <pinChange+0x72>
    12e6:	2a 98       	cbi	0x05, 2	; 5
    12e8:	08 95       	ret
    12ea:	8d 30       	cpi	r24, 0x0D	; 13
    12ec:	91 05       	cpc	r25, r1
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <pinChange+0x7c>
    12f0:	2b 98       	cbi	0x05, 3	; 5
    12f2:	08 95       	ret
    12f4:	8e 30       	cpi	r24, 0x0E	; 14
    12f6:	91 05       	cpc	r25, r1
    12f8:	11 f4       	brne	.+4      	; 0x12fe <pinChange+0x86>
    12fa:	2c 98       	cbi	0x05, 4	; 5
    12fc:	08 95       	ret
    12fe:	8f 30       	cpi	r24, 0x0F	; 15
    1300:	91 05       	cpc	r25, r1
    1302:	11 f4       	brne	.+4      	; 0x1308 <pinChange+0x90>
    1304:	2d 98       	cbi	0x05, 5	; 5
    1306:	08 95       	ret
    1308:	80 31       	cpi	r24, 0x10	; 16
    130a:	91 05       	cpc	r25, r1
    130c:	11 f4       	brne	.+4      	; 0x1312 <pinChange+0x9a>
    130e:	2e 98       	cbi	0x05, 6	; 5
    1310:	08 95       	ret
    1312:	81 31       	cpi	r24, 0x11	; 17
    1314:	91 05       	cpc	r25, r1
    1316:	11 f4       	brne	.+4      	; 0x131c <pinChange+0xa4>
    1318:	2f 98       	cbi	0x05, 7	; 5
    131a:	08 95       	ret
    131c:	84 31       	cpi	r24, 0x14	; 20
    131e:	91 05       	cpc	r25, r1
    1320:	11 f4       	brne	.+4      	; 0x1326 <pinChange+0xae>
    1322:	40 98       	cbi	0x08, 0	; 8
    1324:	08 95       	ret
    1326:	85 31       	cpi	r24, 0x15	; 21
    1328:	91 05       	cpc	r25, r1
    132a:	11 f4       	brne	.+4      	; 0x1330 <pinChange+0xb8>
    132c:	41 98       	cbi	0x08, 1	; 8
    132e:	08 95       	ret
    1330:	86 31       	cpi	r24, 0x16	; 22
    1332:	91 05       	cpc	r25, r1
    1334:	11 f4       	brne	.+4      	; 0x133a <pinChange+0xc2>
    1336:	42 98       	cbi	0x08, 2	; 8
    1338:	08 95       	ret
    133a:	87 31       	cpi	r24, 0x17	; 23
    133c:	91 05       	cpc	r25, r1
    133e:	11 f4       	brne	.+4      	; 0x1344 <pinChange+0xcc>
    1340:	43 98       	cbi	0x08, 3	; 8
    1342:	08 95       	ret
    1344:	88 31       	cpi	r24, 0x18	; 24
    1346:	91 05       	cpc	r25, r1
    1348:	11 f4       	brne	.+4      	; 0x134e <pinChange+0xd6>
    134a:	44 98       	cbi	0x08, 4	; 8
    134c:	08 95       	ret
    134e:	89 31       	cpi	r24, 0x19	; 25
    1350:	91 05       	cpc	r25, r1
    1352:	11 f4       	brne	.+4      	; 0x1358 <pinChange+0xe0>
    1354:	45 98       	cbi	0x08, 5	; 8
    1356:	08 95       	ret
    1358:	8a 31       	cpi	r24, 0x1A	; 26
    135a:	91 05       	cpc	r25, r1
    135c:	11 f4       	brne	.+4      	; 0x1362 <pinChange+0xea>
    135e:	46 98       	cbi	0x08, 6	; 8
    1360:	08 95       	ret
    1362:	8b 31       	cpi	r24, 0x1B	; 27
    1364:	91 05       	cpc	r25, r1
    1366:	11 f4       	brne	.+4      	; 0x136c <pinChange+0xf4>
    1368:	47 98       	cbi	0x08, 7	; 8
    136a:	08 95       	ret
    136c:	8e 31       	cpi	r24, 0x1E	; 30
    136e:	91 05       	cpc	r25, r1
    1370:	11 f4       	brne	.+4      	; 0x1376 <pinChange+0xfe>
    1372:	58 98       	cbi	0x0b, 0	; 11
    1374:	08 95       	ret
    1376:	8f 31       	cpi	r24, 0x1F	; 31
    1378:	91 05       	cpc	r25, r1
    137a:	11 f4       	brne	.+4      	; 0x1380 <pinChange+0x108>
    137c:	59 98       	cbi	0x0b, 1	; 11
    137e:	08 95       	ret
    1380:	80 32       	cpi	r24, 0x20	; 32
    1382:	91 05       	cpc	r25, r1
    1384:	11 f4       	brne	.+4      	; 0x138a <pinChange+0x112>
    1386:	5a 98       	cbi	0x0b, 2	; 11
    1388:	08 95       	ret
    138a:	81 32       	cpi	r24, 0x21	; 33
    138c:	91 05       	cpc	r25, r1
    138e:	11 f4       	brne	.+4      	; 0x1394 <pinChange+0x11c>
    1390:	5b 98       	cbi	0x0b, 3	; 11
    1392:	08 95       	ret
    1394:	82 32       	cpi	r24, 0x22	; 34
    1396:	91 05       	cpc	r25, r1
    1398:	11 f4       	brne	.+4      	; 0x139e <pinChange+0x126>
    139a:	5c 98       	cbi	0x0b, 4	; 11
    139c:	08 95       	ret
    139e:	83 32       	cpi	r24, 0x23	; 35
    13a0:	91 05       	cpc	r25, r1
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <pinChange+0x130>
    13a4:	5d 98       	cbi	0x0b, 5	; 11
    13a6:	08 95       	ret
    13a8:	84 32       	cpi	r24, 0x24	; 36
    13aa:	91 05       	cpc	r25, r1
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <pinChange+0x13a>
    13ae:	5e 98       	cbi	0x0b, 6	; 11
    13b0:	08 95       	ret
    13b2:	85 32       	cpi	r24, 0x25	; 37
    13b4:	91 05       	cpc	r25, r1
    13b6:	11 f4       	brne	.+4      	; 0x13bc <pinChange+0x144>
    13b8:	5f 98       	cbi	0x0b, 7	; 11
    13ba:	08 95       	ret
    13bc:	86 32       	cpi	r24, 0x26	; 38
    13be:	91 05       	cpc	r25, r1
    13c0:	31 f4       	brne	.+12     	; 0x13ce <pinChange+0x156>
    13c2:	e5 e0       	ldi	r30, 0x05	; 5
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	80 81       	ld	r24, Z
    13c8:	8e 7f       	andi	r24, 0xFE	; 254
    13ca:	80 83       	st	Z, r24
    13cc:	08 95       	ret
    13ce:	87 97       	sbiw	r24, 0x27	; 39
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <pinChange+0x15c>
    13d2:	b5 c0       	rjmp	.+362    	; 0x153e <pinChange+0x2c6>
    13d4:	e5 e0       	ldi	r30, 0x05	; 5
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	80 81       	ld	r24, Z
    13da:	8d 7f       	andi	r24, 0xFD	; 253
    13dc:	80 83       	st	Z, r24
    13de:	08 95       	ret
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <pinChange+0x170>
    13e4:	10 9a       	sbi	0x02, 0	; 2
    13e6:	08 95       	ret
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <pinChange+0x17a>
    13ee:	11 9a       	sbi	0x02, 1	; 2
    13f0:	08 95       	ret
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	91 05       	cpc	r25, r1
    13f6:	11 f4       	brne	.+4      	; 0x13fc <pinChange+0x184>
    13f8:	12 9a       	sbi	0x02, 2	; 2
    13fa:	08 95       	ret
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	11 f4       	brne	.+4      	; 0x1406 <pinChange+0x18e>
    1402:	13 9a       	sbi	0x02, 3	; 2
    1404:	08 95       	ret
    1406:	84 30       	cpi	r24, 0x04	; 4
    1408:	91 05       	cpc	r25, r1
    140a:	11 f4       	brne	.+4      	; 0x1410 <pinChange+0x198>
    140c:	14 9a       	sbi	0x02, 4	; 2
    140e:	08 95       	ret
    1410:	85 30       	cpi	r24, 0x05	; 5
    1412:	91 05       	cpc	r25, r1
    1414:	11 f4       	brne	.+4      	; 0x141a <pinChange+0x1a2>
    1416:	15 9a       	sbi	0x02, 5	; 2
    1418:	08 95       	ret
    141a:	86 30       	cpi	r24, 0x06	; 6
    141c:	91 05       	cpc	r25, r1
    141e:	11 f4       	brne	.+4      	; 0x1424 <pinChange+0x1ac>
    1420:	16 9a       	sbi	0x02, 6	; 2
    1422:	08 95       	ret
    1424:	87 30       	cpi	r24, 0x07	; 7
    1426:	91 05       	cpc	r25, r1
    1428:	11 f4       	brne	.+4      	; 0x142e <pinChange+0x1b6>
    142a:	17 9a       	sbi	0x02, 7	; 2
    142c:	08 95       	ret
    142e:	8a 30       	cpi	r24, 0x0A	; 10
    1430:	91 05       	cpc	r25, r1
    1432:	11 f4       	brne	.+4      	; 0x1438 <pinChange+0x1c0>
    1434:	28 9a       	sbi	0x05, 0	; 5
    1436:	08 95       	ret
    1438:	8b 30       	cpi	r24, 0x0B	; 11
    143a:	91 05       	cpc	r25, r1
    143c:	11 f4       	brne	.+4      	; 0x1442 <pinChange+0x1ca>
    143e:	29 9a       	sbi	0x05, 1	; 5
    1440:	08 95       	ret
    1442:	8c 30       	cpi	r24, 0x0C	; 12
    1444:	91 05       	cpc	r25, r1
    1446:	11 f4       	brne	.+4      	; 0x144c <pinChange+0x1d4>
    1448:	2a 9a       	sbi	0x05, 2	; 5
    144a:	08 95       	ret
    144c:	8d 30       	cpi	r24, 0x0D	; 13
    144e:	91 05       	cpc	r25, r1
    1450:	11 f4       	brne	.+4      	; 0x1456 <pinChange+0x1de>
    1452:	2b 9a       	sbi	0x05, 3	; 5
    1454:	08 95       	ret
    1456:	8e 30       	cpi	r24, 0x0E	; 14
    1458:	91 05       	cpc	r25, r1
    145a:	11 f4       	brne	.+4      	; 0x1460 <pinChange+0x1e8>
    145c:	2c 9a       	sbi	0x05, 4	; 5
    145e:	08 95       	ret
    1460:	8f 30       	cpi	r24, 0x0F	; 15
    1462:	91 05       	cpc	r25, r1
    1464:	11 f4       	brne	.+4      	; 0x146a <pinChange+0x1f2>
    1466:	2d 9a       	sbi	0x05, 5	; 5
    1468:	08 95       	ret
    146a:	80 31       	cpi	r24, 0x10	; 16
    146c:	91 05       	cpc	r25, r1
    146e:	11 f4       	brne	.+4      	; 0x1474 <pinChange+0x1fc>
    1470:	2e 9a       	sbi	0x05, 6	; 5
    1472:	08 95       	ret
    1474:	81 31       	cpi	r24, 0x11	; 17
    1476:	91 05       	cpc	r25, r1
    1478:	11 f4       	brne	.+4      	; 0x147e <pinChange+0x206>
    147a:	2f 9a       	sbi	0x05, 7	; 5
    147c:	08 95       	ret
    147e:	84 31       	cpi	r24, 0x14	; 20
    1480:	91 05       	cpc	r25, r1
    1482:	11 f4       	brne	.+4      	; 0x1488 <pinChange+0x210>
    1484:	40 9a       	sbi	0x08, 0	; 8
    1486:	08 95       	ret
    1488:	85 31       	cpi	r24, 0x15	; 21
    148a:	91 05       	cpc	r25, r1
    148c:	11 f4       	brne	.+4      	; 0x1492 <pinChange+0x21a>
    148e:	41 9a       	sbi	0x08, 1	; 8
    1490:	08 95       	ret
    1492:	86 31       	cpi	r24, 0x16	; 22
    1494:	91 05       	cpc	r25, r1
    1496:	11 f4       	brne	.+4      	; 0x149c <pinChange+0x224>
    1498:	42 9a       	sbi	0x08, 2	; 8
    149a:	08 95       	ret
    149c:	87 31       	cpi	r24, 0x17	; 23
    149e:	91 05       	cpc	r25, r1
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <pinChange+0x22e>
    14a2:	43 9a       	sbi	0x08, 3	; 8
    14a4:	08 95       	ret
    14a6:	88 31       	cpi	r24, 0x18	; 24
    14a8:	91 05       	cpc	r25, r1
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <pinChange+0x238>
    14ac:	44 9a       	sbi	0x08, 4	; 8
    14ae:	08 95       	ret
    14b0:	89 31       	cpi	r24, 0x19	; 25
    14b2:	91 05       	cpc	r25, r1
    14b4:	11 f4       	brne	.+4      	; 0x14ba <pinChange+0x242>
    14b6:	45 9a       	sbi	0x08, 5	; 8
    14b8:	08 95       	ret
    14ba:	8a 31       	cpi	r24, 0x1A	; 26
    14bc:	91 05       	cpc	r25, r1
    14be:	11 f4       	brne	.+4      	; 0x14c4 <pinChange+0x24c>
    14c0:	46 9a       	sbi	0x08, 6	; 8
    14c2:	08 95       	ret
    14c4:	8b 31       	cpi	r24, 0x1B	; 27
    14c6:	91 05       	cpc	r25, r1
    14c8:	11 f4       	brne	.+4      	; 0x14ce <pinChange+0x256>
    14ca:	47 9a       	sbi	0x08, 7	; 8
    14cc:	08 95       	ret
    14ce:	8e 31       	cpi	r24, 0x1E	; 30
    14d0:	91 05       	cpc	r25, r1
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <pinChange+0x260>
    14d4:	58 9a       	sbi	0x0b, 0	; 11
    14d6:	08 95       	ret
    14d8:	8f 31       	cpi	r24, 0x1F	; 31
    14da:	91 05       	cpc	r25, r1
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <pinChange+0x26a>
    14de:	59 9a       	sbi	0x0b, 1	; 11
    14e0:	08 95       	ret
    14e2:	80 32       	cpi	r24, 0x20	; 32
    14e4:	91 05       	cpc	r25, r1
    14e6:	11 f4       	brne	.+4      	; 0x14ec <pinChange+0x274>
    14e8:	5a 9a       	sbi	0x0b, 2	; 11
    14ea:	08 95       	ret
    14ec:	81 32       	cpi	r24, 0x21	; 33
    14ee:	91 05       	cpc	r25, r1
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <pinChange+0x27e>
    14f2:	5b 9a       	sbi	0x0b, 3	; 11
    14f4:	08 95       	ret
    14f6:	82 32       	cpi	r24, 0x22	; 34
    14f8:	91 05       	cpc	r25, r1
    14fa:	11 f4       	brne	.+4      	; 0x1500 <pinChange+0x288>
    14fc:	5c 9a       	sbi	0x0b, 4	; 11
    14fe:	08 95       	ret
    1500:	83 32       	cpi	r24, 0x23	; 35
    1502:	91 05       	cpc	r25, r1
    1504:	11 f4       	brne	.+4      	; 0x150a <pinChange+0x292>
    1506:	5d 9a       	sbi	0x0b, 5	; 11
    1508:	08 95       	ret
    150a:	84 32       	cpi	r24, 0x24	; 36
    150c:	91 05       	cpc	r25, r1
    150e:	11 f4       	brne	.+4      	; 0x1514 <pinChange+0x29c>
    1510:	5e 9a       	sbi	0x0b, 6	; 11
    1512:	08 95       	ret
    1514:	85 32       	cpi	r24, 0x25	; 37
    1516:	91 05       	cpc	r25, r1
    1518:	11 f4       	brne	.+4      	; 0x151e <pinChange+0x2a6>
    151a:	5f 9a       	sbi	0x0b, 7	; 11
    151c:	08 95       	ret
    151e:	86 32       	cpi	r24, 0x26	; 38
    1520:	91 05       	cpc	r25, r1
    1522:	31 f4       	brne	.+12     	; 0x1530 <pinChange+0x2b8>
    1524:	e5 e0       	ldi	r30, 0x05	; 5
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	80 81       	ld	r24, Z
    152a:	81 60       	ori	r24, 0x01	; 1
    152c:	80 83       	st	Z, r24
    152e:	08 95       	ret
    1530:	87 97       	sbiw	r24, 0x27	; 39
    1532:	29 f4       	brne	.+10     	; 0x153e <pinChange+0x2c6>
    1534:	e5 e0       	ldi	r30, 0x05	; 5
    1536:	f1 e0       	ldi	r31, 0x01	; 1
    1538:	80 81       	ld	r24, Z
    153a:	82 60       	ori	r24, 0x02	; 2
    153c:	80 83       	st	Z, r24
    153e:	08 95       	ret

00001540 <Lcd4_Port>:
    1540:	cf 93       	push	r28
    1542:	c8 2f       	mov	r28, r24
    1544:	80 ff       	sbrs	r24, 0
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <Lcd4_Port+0x14>
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	84 e1       	ldi	r24, 0x14	; 20
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	93 de       	rcall	.-730    	; 0x1278 <pinChange>
    1552:	05 c0       	rjmp	.+10     	; 0x155e <Lcd4_Port+0x1e>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	84 e1       	ldi	r24, 0x14	; 20
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	8d de       	rcall	.-742    	; 0x1278 <pinChange>
    155e:	c1 ff       	sbrs	r28, 1
    1560:	06 c0       	rjmp	.+12     	; 0x156e <Lcd4_Port+0x2e>
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	85 e1       	ldi	r24, 0x15	; 21
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	86 de       	rcall	.-756    	; 0x1278 <pinChange>
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <Lcd4_Port+0x38>
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	85 e1       	ldi	r24, 0x15	; 21
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	80 de       	rcall	.-768    	; 0x1278 <pinChange>
    1578:	c2 ff       	sbrs	r28, 2
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <Lcd4_Port+0x48>
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	86 e1       	ldi	r24, 0x16	; 22
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	79 de       	rcall	.-782    	; 0x1278 <pinChange>
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <Lcd4_Port+0x52>
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	86 e1       	ldi	r24, 0x16	; 22
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	73 de       	rcall	.-794    	; 0x1278 <pinChange>
    1592:	c3 ff       	sbrs	r28, 3
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <Lcd4_Port+0x62>
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	87 e1       	ldi	r24, 0x17	; 23
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	6c de       	rcall	.-808    	; 0x1278 <pinChange>
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <Lcd4_Port+0x6c>
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	87 e1       	ldi	r24, 0x17	; 23
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	66 de       	rcall	.-820    	; 0x1278 <pinChange>
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <Lcd4_Cmd>:
    15b0:	cf 93       	push	r28
    15b2:	c8 2f       	mov	r28, r24
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	86 e2       	ldi	r24, 0x26	; 38
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	5d de       	rcall	.-838    	; 0x1278 <pinChange>
    15be:	8c 2f       	mov	r24, r28
    15c0:	bf df       	rcall	.-130    	; 0x1540 <Lcd4_Port>
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	87 e2       	ldi	r24, 0x27	; 39
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	56 de       	rcall	.-852    	; 0x1278 <pinChange>
    15cc:	8f ec       	ldi	r24, 0xCF	; 207
    15ce:	97 e0       	ldi	r25, 0x07	; 7
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <Lcd4_Cmd+0x20>
    15d4:	00 c0       	rjmp	.+0      	; 0x15d6 <Lcd4_Cmd+0x26>
    15d6:	00 00       	nop
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	87 e2       	ldi	r24, 0x27	; 39
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	4b de       	rcall	.-874    	; 0x1278 <pinChange>
    15e2:	8f ec       	ldi	r24, 0xCF	; 207
    15e4:	97 e0       	ldi	r25, 0x07	; 7
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <Lcd4_Cmd+0x36>
    15ea:	00 c0       	rjmp	.+0      	; 0x15ec <Lcd4_Cmd+0x3c>
    15ec:	00 00       	nop
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <Lcd4_Clear>:
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	dd df       	rcall	.-70     	; 0x15b0 <Lcd4_Cmd>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	db cf       	rjmp	.-74     	; 0x15b0 <Lcd4_Cmd>
    15fa:	08 95       	ret

000015fc <Lcd4_Set_Cursor>:
    15fc:	cf 93       	push	r28
    15fe:	c6 2f       	mov	r28, r22
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	49 f4       	brne	.+18     	; 0x1616 <Lcd4_Set_Cursor+0x1a>
    1604:	80 e8       	ldi	r24, 0x80	; 128
    1606:	86 0f       	add	r24, r22
    1608:	82 95       	swap	r24
    160a:	8f 70       	andi	r24, 0x0F	; 15
    160c:	d1 df       	rcall	.-94     	; 0x15b0 <Lcd4_Cmd>
    160e:	8c 2f       	mov	r24, r28
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	ce df       	rcall	.-100    	; 0x15b0 <Lcd4_Cmd>
    1614:	0a c0       	rjmp	.+20     	; 0x162a <Lcd4_Set_Cursor+0x2e>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	41 f4       	brne	.+16     	; 0x162a <Lcd4_Set_Cursor+0x2e>
    161a:	80 ec       	ldi	r24, 0xC0	; 192
    161c:	86 0f       	add	r24, r22
    161e:	82 95       	swap	r24
    1620:	8f 70       	andi	r24, 0x0F	; 15
    1622:	c6 df       	rcall	.-116    	; 0x15b0 <Lcd4_Cmd>
    1624:	8c 2f       	mov	r24, r28
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	c3 df       	rcall	.-122    	; 0x15b0 <Lcd4_Cmd>
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <Lcd4_Init>:
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	87 df       	rcall	.-242    	; 0x1540 <Lcd4_Port>
    1632:	8f e3       	ldi	r24, 0x3F	; 63
    1634:	9c e9       	ldi	r25, 0x9C	; 156
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <Lcd4_Init+0x8>
    163a:	00 c0       	rjmp	.+0      	; 0x163c <Lcd4_Init+0xe>
    163c:	00 00       	nop
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	b7 df       	rcall	.-146    	; 0x15b0 <Lcd4_Cmd>
    1642:	8f e0       	ldi	r24, 0x0F	; 15
    1644:	97 e2       	ldi	r25, 0x27	; 39
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <Lcd4_Init+0x18>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <Lcd4_Init+0x1e>
    164c:	00 00       	nop
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	af df       	rcall	.-162    	; 0x15b0 <Lcd4_Cmd>
    1652:	8f ee       	ldi	r24, 0xEF	; 239
    1654:	95 e5       	ldi	r25, 0x55	; 85
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <Lcd4_Init+0x28>
    165a:	00 c0       	rjmp	.+0      	; 0x165c <Lcd4_Init+0x2e>
    165c:	00 00       	nop
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	a7 df       	rcall	.-178    	; 0x15b0 <Lcd4_Cmd>
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	a5 df       	rcall	.-182    	; 0x15b0 <Lcd4_Cmd>
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	a3 df       	rcall	.-186    	; 0x15b0 <Lcd4_Cmd>
    166a:	88 e0       	ldi	r24, 0x08	; 8
    166c:	a1 df       	rcall	.-190    	; 0x15b0 <Lcd4_Cmd>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	9f df       	rcall	.-194    	; 0x15b0 <Lcd4_Cmd>
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	9d df       	rcall	.-198    	; 0x15b0 <Lcd4_Cmd>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	9b df       	rcall	.-202    	; 0x15b0 <Lcd4_Cmd>
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	99 cf       	rjmp	.-206    	; 0x15b0 <Lcd4_Cmd>
    167e:	08 95       	ret

00001680 <Lcd4_Write_Char>:
    1680:	cf 93       	push	r28
    1682:	c8 2f       	mov	r28, r24
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	86 e2       	ldi	r24, 0x26	; 38
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	f5 dd       	rcall	.-1046   	; 0x1278 <pinChange>
    168e:	8c 2f       	mov	r24, r28
    1690:	82 95       	swap	r24
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	55 df       	rcall	.-342    	; 0x1540 <Lcd4_Port>
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	87 e2       	ldi	r24, 0x27	; 39
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	ec dd       	rcall	.-1064   	; 0x1278 <pinChange>
    16a0:	8f ec       	ldi	r24, 0xCF	; 207
    16a2:	97 e0       	ldi	r25, 0x07	; 7
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <Lcd4_Write_Char+0x24>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <Lcd4_Write_Char+0x2a>
    16aa:	00 00       	nop
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	87 e2       	ldi	r24, 0x27	; 39
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	e1 dd       	rcall	.-1086   	; 0x1278 <pinChange>
    16b6:	8f ec       	ldi	r24, 0xCF	; 207
    16b8:	97 e0       	ldi	r25, 0x07	; 7
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <Lcd4_Write_Char+0x3a>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <Lcd4_Write_Char+0x40>
    16c0:	00 00       	nop
    16c2:	8c 2f       	mov	r24, r28
    16c4:	8f 70       	andi	r24, 0x0F	; 15
    16c6:	3c df       	rcall	.-392    	; 0x1540 <Lcd4_Port>
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	87 e2       	ldi	r24, 0x27	; 39
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	d3 dd       	rcall	.-1114   	; 0x1278 <pinChange>
    16d2:	8f ec       	ldi	r24, 0xCF	; 207
    16d4:	97 e0       	ldi	r25, 0x07	; 7
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <Lcd4_Write_Char+0x56>
    16da:	00 c0       	rjmp	.+0      	; 0x16dc <Lcd4_Write_Char+0x5c>
    16dc:	00 00       	nop
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	87 e2       	ldi	r24, 0x27	; 39
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	c8 dd       	rcall	.-1136   	; 0x1278 <pinChange>
    16e8:	8f ec       	ldi	r24, 0xCF	; 207
    16ea:	97 e0       	ldi	r25, 0x07	; 7
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <Lcd4_Write_Char+0x6c>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <Lcd4_Write_Char+0x72>
    16f2:	00 00       	nop
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <Lcd4_Write_String>:
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	88 81       	ld	r24, Y
    1700:	88 23       	and	r24, r24
    1702:	29 f0       	breq	.+10     	; 0x170e <Lcd4_Write_String+0x16>
    1704:	21 96       	adiw	r28, 0x01	; 1
    1706:	bc df       	rcall	.-136    	; 0x1680 <Lcd4_Write_Char>
    1708:	89 91       	ld	r24, Y+
    170a:	81 11       	cpse	r24, r1
    170c:	fc cf       	rjmp	.-8      	; 0x1706 <Lcd4_Write_String+0xe>
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <__vector_17>:
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	91 b3       	in	r25, 0x11	; 17
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	89 27       	eor	r24, r25
    1728:	81 bb       	out	0x11, r24	; 17
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <__vector_32>:
    1738:	1f 92       	push	r1
    173a:	0f 92       	push	r0
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	0f 92       	push	r0
    1740:	11 24       	eor	r1, r1
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	91 b3       	in	r25, 0x11	; 17
    1748:	88 e0       	ldi	r24, 0x08	; 8
    174a:	89 27       	eor	r24, r25
    174c:	81 bb       	out	0x11, r24	; 17
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	0f 90       	pop	r0
    1758:	1f 90       	pop	r1
    175a:	18 95       	reti

0000175c <__vector_42>:
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	0b b6       	in	r0, 0x3b	; 59
    1768:	0f 92       	push	r0
    176a:	2f 93       	push	r18
    176c:	3f 93       	push	r19
    176e:	4f 93       	push	r20
    1770:	5f 93       	push	r21
    1772:	6f 93       	push	r22
    1774:	7f 93       	push	r23
    1776:	8f 93       	push	r24
    1778:	9f 93       	push	r25
    177a:	af 93       	push	r26
    177c:	bf 93       	push	r27
    177e:	ef 93       	push	r30
    1780:	ff 93       	push	r31
    1782:	80 91 ee 03 	lds	r24, 0x03EE
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	80 93 ee 03 	sts	0x03EE, r24
    178c:	f8 94       	cli
    178e:	80 91 ee 03 	lds	r24, 0x03EE
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	08 f4       	brcc	.+2      	; 0x1798 <__vector_42+0x3c>
    1796:	75 c0       	rjmp	.+234    	; 0x1882 <__vector_42+0x126>
    1798:	80 91 09 01 	lds	r24, 0x0109
    179c:	84 fd       	sbrc	r24, 4
    179e:	13 c0       	rjmp	.+38     	; 0x17c6 <__vector_42+0x6a>
    17a0:	81 b3       	in	r24, 0x11	; 17
    17a2:	80 58       	subi	r24, 0x80	; 128
    17a4:	81 bb       	out	0x11, r24	; 17
    17a6:	2f ef       	ldi	r18, 0xFF	; 255
    17a8:	82 e5       	ldi	r24, 0x52	; 82
    17aa:	97 e0       	ldi	r25, 0x07	; 7
    17ac:	21 50       	subi	r18, 0x01	; 1
    17ae:	80 40       	sbci	r24, 0x00	; 0
    17b0:	90 40       	sbci	r25, 0x00	; 0
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <__vector_42+0x50>
    17b4:	00 c0       	rjmp	.+0      	; 0x17b6 <__vector_42+0x5a>
    17b6:	00 00       	nop
    17b8:	1c df       	rcall	.-456    	; 0x15f2 <Lcd4_Clear>
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	1e df       	rcall	.-452    	; 0x15fc <Lcd4_Set_Cursor>
    17c0:	84 e8       	ldi	r24, 0x84	; 132
    17c2:	92 e0       	ldi	r25, 0x02	; 2
    17c4:	99 df       	rcall	.-206    	; 0x16f8 <Lcd4_Write_String>
    17c6:	15 df       	rcall	.-470    	; 0x15f2 <Lcd4_Clear>
    17c8:	80 91 06 01 	lds	r24, 0x0106
    17cc:	80 ff       	sbrs	r24, 0
    17ce:	11 c0       	rjmp	.+34     	; 0x17f2 <__vector_42+0x96>
    17d0:	80 91 ec 03 	lds	r24, 0x03EC
    17d4:	90 91 ed 03 	lds	r25, 0x03ED
    17d8:	89 2b       	or	r24, r25
    17da:	59 f4       	brne	.+22     	; 0x17f2 <__vector_42+0x96>
    17dc:	88 ef       	ldi	r24, 0xF8	; 248
    17de:	80 93 81 00 	sts	0x0081, r24
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	90 93 ed 03 	sts	0x03ED, r25
    17ea:	80 93 ec 03 	sts	0x03EC, r24
    17ee:	10 92 ee 03 	sts	0x03EE, r1
    17f2:	80 91 06 01 	lds	r24, 0x0106
    17f6:	81 ff       	sbrs	r24, 1
    17f8:	15 c0       	rjmp	.+42     	; 0x1824 <__vector_42+0xc8>
    17fa:	88 ef       	ldi	r24, 0xF8	; 248
    17fc:	80 93 91 00 	sts	0x0091, r24
    1800:	80 93 81 00 	sts	0x0081, r24
    1804:	f6 de       	rcall	.-532    	; 0x15f2 <Lcd4_Clear>
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	f8 de       	rcall	.-528    	; 0x15fc <Lcd4_Set_Cursor>
    180c:	8c e8       	ldi	r24, 0x8C	; 140
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	73 df       	rcall	.-282    	; 0x16f8 <Lcd4_Write_String>
    1812:	2f e7       	ldi	r18, 0x7F	; 127
    1814:	88 e3       	ldi	r24, 0x38	; 56
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	80 40       	sbci	r24, 0x00	; 0
    181c:	90 40       	sbci	r25, 0x00	; 0
    181e:	e1 f7       	brne	.-8      	; 0x1818 <__vector_42+0xbc>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <__vector_42+0xc6>
    1822:	00 00       	nop
    1824:	80 91 06 01 	lds	r24, 0x0106
    1828:	82 ff       	sbrs	r24, 2
    182a:	15 c0       	rjmp	.+42     	; 0x1856 <__vector_42+0xfa>
    182c:	88 ef       	ldi	r24, 0xF8	; 248
    182e:	80 93 91 00 	sts	0x0091, r24
    1832:	80 93 81 00 	sts	0x0081, r24
    1836:	dd de       	rcall	.-582    	; 0x15f2 <Lcd4_Clear>
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	df de       	rcall	.-578    	; 0x15fc <Lcd4_Set_Cursor>
    183e:	84 e9       	ldi	r24, 0x94	; 148
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	5a df       	rcall	.-332    	; 0x16f8 <Lcd4_Write_String>
    1844:	2f e7       	ldi	r18, 0x7F	; 127
    1846:	88 e3       	ldi	r24, 0x38	; 56
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	21 50       	subi	r18, 0x01	; 1
    184c:	80 40       	sbci	r24, 0x00	; 0
    184e:	90 40       	sbci	r25, 0x00	; 0
    1850:	e1 f7       	brne	.-8      	; 0x184a <__vector_42+0xee>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <__vector_42+0xf8>
    1854:	00 00       	nop
    1856:	80 91 06 01 	lds	r24, 0x0106
    185a:	83 ff       	sbrs	r24, 3
    185c:	11 c0       	rjmp	.+34     	; 0x1880 <__vector_42+0x124>
    185e:	80 91 ea 03 	lds	r24, 0x03EA
    1862:	90 91 eb 03 	lds	r25, 0x03EB
    1866:	89 2b       	or	r24, r25
    1868:	59 f4       	brne	.+22     	; 0x1880 <__vector_42+0x124>
    186a:	88 ef       	ldi	r24, 0xF8	; 248
    186c:	80 93 91 00 	sts	0x0091, r24
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	90 93 eb 03 	sts	0x03EB, r25
    1878:	80 93 ea 03 	sts	0x03EA, r24
    187c:	10 92 ee 03 	sts	0x03EE, r1
    1880:	78 94       	sei
    1882:	ff 91       	pop	r31
    1884:	ef 91       	pop	r30
    1886:	bf 91       	pop	r27
    1888:	af 91       	pop	r26
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	7f 91       	pop	r23
    1890:	6f 91       	pop	r22
    1892:	5f 91       	pop	r21
    1894:	4f 91       	pop	r20
    1896:	3f 91       	pop	r19
    1898:	2f 91       	pop	r18
    189a:	0f 90       	pop	r0
    189c:	0b be       	out	0x3b, r0	; 59
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <main>:
	//PORTG = 0xFF;
	//sei();// Enable Interrupt
//}

int main(void)
{
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	60 97       	sbiw	r28, 0x10	; 16
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	8f e1       	ldi	r24, 0x1F	; 31
    18be:	9e e4       	ldi	r25, 0x4E	; 78
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <main+0x18>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <main+0x1e>
    18c6:	00 00       	nop
	//long temp = 0;
	_delay_ms(10);
	DDRG = 0xFF;//diode
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;
    18cc:	14 ba       	out	0x14, r1	; 20
	////InitTimer0();
	InitTimer1();
    18ce:	94 dc       	rcall	.-1752   	; 0x11f8 <InitTimer1>
	InitTimer3();
    18d0:	a9 dc       	rcall	.-1710   	; 0x1224 <InitTimer3>
	InitTimer4();
    18d2:	bd dc       	rcall	.-1670   	; 0x124e <InitTimer4>
	Hardware_Init();
    18d4:	76 dc       	rcall	.-1812   	; 0x11c2 <Hardware_Init>
	USART_Init();
    18d6:	8a dc       	rcall	.-1772   	; 0x11ec <USART_Init>
	Lcd4_Init();
    18d8:	aa de       	rcall	.-684    	; 0x162e <Lcd4_Init>
    18da:	9f ef       	ldi	r25, 0xFF	; 255
    18dc:	e0 e7       	ldi	r30, 0x70	; 112
    18de:	f2 e0       	ldi	r31, 0x02	; 2
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	e0 40       	sbci	r30, 0x00	; 0
    18e4:	f0 40       	sbci	r31, 0x00	; 0
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <main+0x38>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <main+0x42>
    18ea:	00 00       	nop
	
	_delay_ms(100);
	PORTK |= (1 << PK6);//GREEN ON
    18ec:	e8 e0       	ldi	r30, 0x08	; 8
    18ee:	f1 e0       	ldi	r31, 0x01	; 1
    18f0:	80 81       	ld	r24, Z
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	80 83       	st	Z, r24
	
	Lcd4_Clear();
    18f6:	7d de       	rcall	.-774    	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	7f de       	rcall	.-770    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("miSRT Machine");
    18fe:	8f ea       	ldi	r24, 0xAF	; 175
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	fa de       	rcall	.-524    	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	79 de       	rcall	.-782    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Init...");
    190a:	8d eb       	ldi	r24, 0xBD	; 189
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	f4 de       	rcall	.-536    	; 0x16f8 <Lcd4_Write_String>
    1910:	2f ef       	ldi	r18, 0xFF	; 255
    1912:	83 ed       	ldi	r24, 0xD3	; 211
    1914:	90 e3       	ldi	r25, 0x30	; 48
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	80 40       	sbci	r24, 0x00	; 0
    191a:	90 40       	sbci	r25, 0x00	; 0
    191c:	e1 f7       	brne	.-8      	; 0x1916 <main+0x6e>
    191e:	00 c0       	rjmp	.+0      	; 0x1920 <main+0x78>
    1920:	00 00       	nop
	_delay_ms(2000);
	
	Go_To_Zero_Init();// Set Zero Axis
    1922:	0e 94 2a 01 	call	0x254	; 0x254 <Go_To_Zero_Init>
    1926:	ef e7       	ldi	r30, 0x7F	; 127
    1928:	f8 e3       	ldi	r31, 0x38	; 56
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	e1 50       	subi	r30, 0x01	; 1
    192e:	f0 40       	sbci	r31, 0x00	; 0
    1930:	20 40       	sbci	r18, 0x00	; 0
    1932:	e1 f7       	brne	.-8      	; 0x192c <main+0x84>
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <main+0x8e>
    1936:	00 00       	nop
	_delay_ms(50);
	
	Lcd4_Clear();
    1938:	5c de       	rcall	.-840    	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	5e de       	rcall	.-836    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("miSRT Ready");
    1940:	85 ec       	ldi	r24, 0xC5	; 197
    1942:	92 e0       	ldi	r25, 0x02	; 2
    1944:	d9 de       	rcall	.-590    	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	58 de       	rcall	.-848    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Select Weight:");
    194c:	8c e9       	ldi	r24, 0x9C	; 156
    194e:	92 e0       	ldi	r25, 0x02	; 2
    1950:	d3 de       	rcall	.-602    	; 0x16f8 <Lcd4_Write_String>
	
	while ((bit_is_clear(PINL, PL5)))  // Select
    1952:	e9 e0       	ldi	r30, 0x09	; 9
    1954:	f1 e0       	ldi	r31, 0x01	; 1
    1956:	80 81       	ld	r24, Z
    1958:	85 ff       	sbrs	r24, 5
    195a:	fd cf       	rjmp	.-6      	; 0x1956 <main+0xae>
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	92 e5       	ldi	r25, 0x52	; 82
    1960:	e7 e0       	ldi	r30, 0x07	; 7
    1962:	81 50       	subi	r24, 0x01	; 1
    1964:	90 40       	sbci	r25, 0x00	; 0
    1966:	e0 40       	sbci	r30, 0x00	; 0
    1968:	e1 f7       	brne	.-8      	; 0x1962 <main+0xba>
    196a:	00 c0       	rjmp	.+0      	; 0x196c <main+0xc4>
    196c:	00 00       	nop
	
	_delay_ms(300);
	
	//TST_Method();
	
	SetWeight();
    196e:	a7 da       	rcall	.-2738   	; 0xebe <SetWeight>
    1970:	ff ef       	ldi	r31, 0xFF	; 255
    1972:	22 e5       	ldi	r18, 0x52	; 82
    1974:	87 e0       	ldi	r24, 0x07	; 7
    1976:	f1 50       	subi	r31, 0x01	; 1
    1978:	20 40       	sbci	r18, 0x00	; 0
    197a:	80 40       	sbci	r24, 0x00	; 0
    197c:	e1 f7       	brne	.-8      	; 0x1976 <main+0xce>
    197e:	00 c0       	rjmp	.+0      	; 0x1980 <main+0xd8>
    1980:	00 00       	nop
	_delay_ms(300);
	SetCapacity();
    1982:	be db       	rcall	.-2180   	; 0x1100 <SetCapacity>
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	e2 e5       	ldi	r30, 0x52	; 82
    1988:	f7 e0       	ldi	r31, 0x07	; 7
    198a:	91 50       	subi	r25, 0x01	; 1
    198c:	e0 40       	sbci	r30, 0x00	; 0
    198e:	f0 40       	sbci	r31, 0x00	; 0
    1990:	e1 f7       	brne	.-8      	; 0x198a <main+0xe2>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <main+0xec>
    1994:	00 00       	nop
	_delay_ms(300);
	SetCups();
    1996:	26 db       	rcall	.-2484   	; 0xfe4 <SetCups>
    1998:	4a e0       	ldi	r20, 0x0A	; 10
    199a:	63 e2       	ldi	r22, 0x23	; 35
    199c:	74 e0       	ldi	r23, 0x04	; 4
    199e:	80 91 72 03 	lds	r24, 0x0372
    19a2:	90 91 73 03 	lds	r25, 0x0373
    19a6:	5b d3       	rcall	.+1718   	; 0x205e <__itoa_ncheck>
	
	itoa(Gram_Target, Screen_Buffer, 10);
	Lcd4_Clear();
    19a8:	24 de       	rcall	.-952    	; 0x15f2 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	26 de       	rcall	.-948    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String("Selected Weight:");
    19b0:	81 ed       	ldi	r24, 0xD1	; 209
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	a1 de       	rcall	.-702    	; 0x16f8 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	20 de       	rcall	.-960    	; 0x15fc <Lcd4_Set_Cursor>
	Lcd4_Write_String(Screen_Buffer);
    19bc:	83 e2       	ldi	r24, 0x23	; 35
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	9b de       	rcall	.-714    	; 0x16f8 <Lcd4_Write_String>
    19c2:	2f ef       	ldi	r18, 0xFF	; 255
    19c4:	83 ed       	ldi	r24, 0xD3	; 211
    19c6:	90 e3       	ldi	r25, 0x30	; 48
    19c8:	21 50       	subi	r18, 0x01	; 1
    19ca:	80 40       	sbci	r24, 0x00	; 0
    19cc:	90 40       	sbci	r25, 0x00	; 0
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <main+0x120>
    19d0:	00 c0       	rjmp	.+0      	; 0x19d2 <main+0x12a>
    19d2:	00 00       	nop
	_delay_ms(2000);
	
	//ChangeScreen(CountScreen);
	PORTK = (1<<PK5);// Open AIR
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	80 93 08 01 	sts	0x0108, r24
	Lcd4_Clear();
    19da:	0b de       	rcall	.-1002   	; 0x15f2 <Lcd4_Clear>
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
    19dc:	09 e0       	ldi	r16, 0x09	; 9
    19de:	11 e0       	ldi	r17, 0x01	; 1
			Lcd4_Set_Cursor(2,0);
			Lcd4_Write_String(Screen_Buffer);
			_delay_ms(300);
		}
		
		PORTK &= ~(1 << PK6);// Green OFF
    19e0:	68 94       	set
    19e2:	66 24       	eor	r6, r6
    19e4:	63 f8       	bld	r6, 3
    19e6:	77 24       	eor	r7, r7
    19e8:	73 94       	inc	r7
    19ea:	0f 2e       	mov	r0, r31
    19ec:	f8 eb       	ldi	r31, 0xB8	; 184
    19ee:	4f 2e       	mov	r4, r31
    19f0:	f3 e0       	ldi	r31, 0x03	; 3
    19f2:	5f 2e       	mov	r5, r31
    19f4:	f0 2d       	mov	r31, r0
    19f6:	0f 2e       	mov	r0, r31
    19f8:	f0 ee       	ldi	r31, 0xE0	; 224
    19fa:	af 2e       	mov	r10, r31
    19fc:	f3 e0       	ldi	r31, 0x03	; 3
    19fe:	bf 2e       	mov	r11, r31
    1a00:	f0 2d       	mov	r31, r0
    1a02:	0f 2e       	mov	r0, r31
    1a04:	f0 e9       	ldi	r31, 0x90	; 144
    1a06:	2f 2e       	mov	r2, r31
    1a08:	f3 e0       	ldi	r31, 0x03	; 3
    1a0a:	3f 2e       	mov	r3, r31
    1a0c:	f0 2d       	mov	r31, r0
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	f8 eb       	ldi	r31, 0xB8	; 184
    1a12:	cf 2e       	mov	r12, r31
    1a14:	f3 e0       	ldi	r31, 0x03	; 3
    1a16:	df 2e       	mov	r13, r31
    1a18:	f0 2d       	mov	r31, r0
    1a1a:	36 c0       	rjmp	.+108    	; 0x1a88 <main+0x1e0>
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
		{
			if (!(bit_is_clear(PINL, PL7)))//select new weight  
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 23       	and	r24, r24
    1a22:	ac f4       	brge	.+42     	; 0x1a4e <main+0x1a6>
			{
				SetWeight();
    1a24:	4c da       	rcall	.-2920   	; 0xebe <SetWeight>
    1a26:	ff ef       	ldi	r31, 0xFF	; 255
    1a28:	22 e5       	ldi	r18, 0x52	; 82
    1a2a:	87 e0       	ldi	r24, 0x07	; 7
    1a2c:	f1 50       	subi	r31, 0x01	; 1
    1a2e:	20 40       	sbci	r18, 0x00	; 0
    1a30:	80 40       	sbci	r24, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <main+0x184>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <main+0x18e>
    1a36:	00 00       	nop
				_delay_ms(300);
				SetCapacity();
    1a38:	63 db       	rcall	.-2362   	; 0x1100 <SetCapacity>
    1a3a:	9f ef       	ldi	r25, 0xFF	; 255
    1a3c:	e2 e5       	ldi	r30, 0x52	; 82
    1a3e:	f7 e0       	ldi	r31, 0x07	; 7
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	e0 40       	sbci	r30, 0x00	; 0
    1a44:	f0 40       	sbci	r31, 0x00	; 0
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <main+0x198>
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <main+0x1a2>
    1a4a:	00 00       	nop
				_delay_ms(300);
				SetCups();
    1a4c:	cb da       	rcall	.-2666   	; 0xfe4 <SetCups>
    1a4e:	4a e0       	ldi	r20, 0x0A	; 10
    1a50:	63 e2       	ldi	r22, 0x23	; 35
    1a52:	74 e0       	ldi	r23, 0x04	; 4
    1a54:	80 91 72 03 	lds	r24, 0x0372
    1a58:	90 91 73 03 	lds	r25, 0x0373
    1a5c:	00 d3       	rcall	.+1536   	; 0x205e <__itoa_ncheck>
			}
			itoa(Gram_Target, Screen_Buffer, 10);
			Lcd4_Set_Cursor(1,0);
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	cc dd       	rcall	.-1128   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String("New Weight Set:");
    1a64:	82 ee       	ldi	r24, 0xE2	; 226
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	47 de       	rcall	.-882    	; 0x16f8 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	c6 dd       	rcall	.-1140   	; 0x15fc <Lcd4_Set_Cursor>
			Lcd4_Write_String(Screen_Buffer);
    1a70:	83 e2       	ldi	r24, 0x23	; 35
    1a72:	94 e0       	ldi	r25, 0x04	; 4
    1a74:	41 de       	rcall	.-894    	; 0x16f8 <Lcd4_Write_String>
    1a76:	2f ef       	ldi	r18, 0xFF	; 255
    1a78:	82 e5       	ldi	r24, 0x52	; 82
    1a7a:	97 e0       	ldi	r25, 0x07	; 7
    1a7c:	21 50       	subi	r18, 0x01	; 1
    1a7e:	80 40       	sbci	r24, 0x00	; 0
    1a80:	90 40       	sbci	r25, 0x00	; 0
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <main+0x1d4>
    1a84:	00 c0       	rjmp	.+0      	; 0x1a86 <main+0x1de>
    1a86:	00 00       	nop
	PORTK = (1<<PK5);// Open AIR
	Lcd4_Clear();
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
    1a88:	f8 01       	movw	r30, r16
    1a8a:	80 81       	ld	r24, Z
    1a8c:	85 ff       	sbrs	r24, 5
    1a8e:	c6 cf       	rjmp	.-116    	; 0x1a1c <main+0x174>
			Lcd4_Set_Cursor(2,0);
			Lcd4_Write_String(Screen_Buffer);
			_delay_ms(300);
		}
		
		PORTK &= ~(1 << PK6);// Green OFF
    1a90:	f3 01       	movw	r30, r6
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 7b       	andi	r24, 0xBF	; 191
    1a96:	80 83       	st	Z, r24
		PORTF |= (1 << PF7);//Red ON
    1a98:	8f 9a       	sbi	0x11, 7	; 17
					
		Lcd4_Clear();
    1a9a:	ab dd       	rcall	.-1194   	; 0x15f2 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	ad dd       	rcall	.-1190   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Fill:");
    1aa2:	82 ef       	ldi	r24, 0xF2	; 242
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	28 de       	rcall	.-944    	; 0x16f8 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	a7 dd       	rcall	.-1202   	; 0x15fc <Lcd4_Set_Cursor>
		Lcd4_Write_String(Screen_Buffer);
    1aae:	83 e2       	ldi	r24, 0x23	; 35
    1ab0:	94 e0       	ldi	r25, 0x04	; 4
    1ab2:	22 de       	rcall	.-956    	; 0x16f8 <Lcd4_Write_String>
					
		//fill 
		Grams = Gram_Target - 2;
    1ab4:	80 91 72 03 	lds	r24, 0x0372
    1ab8:	90 91 73 03 	lds	r25, 0x0373
    1abc:	02 97       	sbiw	r24, 0x02	; 2
    1abe:	90 93 e9 03 	sts	0x03E9, r25
    1ac2:	80 93 e8 03 	sts	0x03E8, r24
		//X_Axis = 3;// number of positions ???????????????????????????????????????
		//Y_Axis = 5;// never "0"
		Go_To (X_Axis, Y_Axis);
    1ac6:	60 91 ef 03 	lds	r22, 0x03EF
    1aca:	70 91 f0 03 	lds	r23, 0x03F0
    1ace:	80 91 f1 03 	lds	r24, 0x03F1
    1ad2:	90 91 f2 03 	lds	r25, 0x03F2
    1ad6:	8c d8       	rcall	.-3816   	; 0xbf0 <Go_To>
    1ad8:	8f e1       	ldi	r24, 0x1F	; 31
    1ada:	9e e4       	ldi	r25, 0x4E	; 78
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <main+0x234>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <main+0x23a>
    1ae2:	00 00       	nop
		//
		_delay_ms(10);
		Sum_L = 0;
    1ae4:	10 92 e3 03 	sts	0x03E3, r1
    1ae8:	10 92 e2 03 	sts	0x03E2, r1
    1aec:	72 01       	movw	r14, r4
    1aee:	47 01       	movw	r8, r14
    1af0:	4a e0       	ldi	r20, 0x0A	; 10
    1af2:	be 01       	movw	r22, r28
    1af4:	6f 5f       	subi	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	f7 01       	movw	r30, r14
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	af d2       	rcall	.+1374   	; 0x205e <__itoa_ncheck>
		char Screen[16];
		for (int i = 0; i < 20; i++)//Left
		{
			itoa(errorFill_L[i], Screen, 10);
			if (errorFill_L[i] > 0)
    1b00:	f7 01       	movw	r30, r14
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	18 16       	cp	r1, r24
    1b08:	19 06       	cpc	r1, r25
    1b0a:	a4 f4       	brge	.+40     	; 0x1b34 <main+0x28c>
			{
				Lcd4_Clear();
    1b0c:	72 dd       	rcall	.-1308   	; 0x15f2 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	74 dd       	rcall	.-1304   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String("Fail Left On:");
    1b14:	88 ef       	ldi	r24, 0xF8	; 248
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	ef dd       	rcall	.-1058   	; 0x16f8 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,0);
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	6e dd       	rcall	.-1316   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String(Screen);
    1b20:	ce 01       	movw	r24, r28
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	e9 dd       	rcall	.-1070   	; 0x16f8 <Lcd4_Write_String>
				while (bit_is_clear(PINL, PL5));
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 81       	ld	r24, Z
    1b2a:	85 ff       	sbrs	r24, 5
    1b2c:	fc cf       	rjmp	.-8      	; 0x1b26 <main+0x27e>
				errorFill_L[i] = 0;
    1b2e:	f4 01       	movw	r30, r8
    1b30:	11 82       	std	Z+1, r1	; 0x01
    1b32:	10 82       	st	Z, r1
    1b34:	ff ef       	ldi	r31, 0xFF	; 255
    1b36:	24 e3       	ldi	r18, 0x34	; 52
    1b38:	8c e0       	ldi	r24, 0x0C	; 12
    1b3a:	f1 50       	subi	r31, 0x01	; 1
    1b3c:	20 40       	sbci	r18, 0x00	; 0
    1b3e:	80 40       	sbci	r24, 0x00	; 0
    1b40:	e1 f7       	brne	.-8      	; 0x1b3a <main+0x292>
    1b42:	00 c0       	rjmp	.+0      	; 0x1b44 <main+0x29c>
    1b44:	00 00       	nop
    1b46:	92 e0       	ldi	r25, 0x02	; 2
    1b48:	e9 0e       	add	r14, r25
    1b4a:	f1 1c       	adc	r15, r1
		Go_To (X_Axis, Y_Axis);
		//
		_delay_ms(10);
		Sum_L = 0;
		char Screen[16];
		for (int i = 0; i < 20; i++)//Left
    1b4c:	ea 14       	cp	r14, r10
    1b4e:	fb 04       	cpc	r15, r11
    1b50:	71 f6       	brne	.-100    	; 0x1aee <main+0x246>
				errorFill_L[i] = 0;
			}
			//errorFill_L[i] = 0;
			_delay_ms(500);
		}
		countErrors_L = 0;
    1b52:	10 92 77 03 	sts	0x0377, r1
    1b56:	10 92 76 03 	sts	0x0376, r1
					
		Sum_R = 0;
    1b5a:	10 92 e1 03 	sts	0x03E1, r1
    1b5e:	10 92 e0 03 	sts	0x03E0, r1
    1b62:	71 01       	movw	r14, r2
    1b64:	47 01       	movw	r8, r14
    1b66:	4a e0       	ldi	r20, 0x0A	; 10
    1b68:	be 01       	movw	r22, r28
    1b6a:	6f 5f       	subi	r22, 0xFF	; 255
    1b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6e:	f7 01       	movw	r30, r14
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	74 d2       	rcall	.+1256   	; 0x205e <__itoa_ncheck>
		for (int i = 0; i < 20; i++)//Right
		{
			itoa(errorFill_R[i], Screen, 10);
			if (errorFill_R[i] > 0)
    1b76:	f7 01       	movw	r30, r14
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	18 16       	cp	r1, r24
    1b7e:	19 06       	cpc	r1, r25
    1b80:	a4 f4       	brge	.+40     	; 0x1baa <main+0x302>
			{
				Lcd4_Clear();
    1b82:	37 dd       	rcall	.-1426   	; 0x15f2 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	39 dd       	rcall	.-1422   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String("Fail Right On:");
    1b8a:	86 e0       	ldi	r24, 0x06	; 6
    1b8c:	93 e0       	ldi	r25, 0x03	; 3
    1b8e:	b4 dd       	rcall	.-1176   	; 0x16f8 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,0);
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	33 dd       	rcall	.-1434   	; 0x15fc <Lcd4_Set_Cursor>
				Lcd4_Write_String(Screen);
    1b96:	ce 01       	movw	r24, r28
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	ae dd       	rcall	.-1188   	; 0x16f8 <Lcd4_Write_String>
				while (bit_is_clear(PINL, PL5));
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 81       	ld	r24, Z
    1ba0:	85 ff       	sbrs	r24, 5
    1ba2:	fc cf       	rjmp	.-8      	; 0x1b9c <main+0x2f4>
				errorFill_R[i] = 0;
    1ba4:	f4 01       	movw	r30, r8
    1ba6:	11 82       	std	Z+1, r1	; 0x01
    1ba8:	10 82       	st	Z, r1
    1baa:	ff ef       	ldi	r31, 0xFF	; 255
    1bac:	24 e3       	ldi	r18, 0x34	; 52
    1bae:	8c e0       	ldi	r24, 0x0C	; 12
    1bb0:	f1 50       	subi	r31, 0x01	; 1
    1bb2:	20 40       	sbci	r18, 0x00	; 0
    1bb4:	80 40       	sbci	r24, 0x00	; 0
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <main+0x308>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <main+0x312>
    1bba:	00 00       	nop
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	e9 0e       	add	r14, r25
    1bc0:	f1 1c       	adc	r15, r1
			_delay_ms(500);
		}
		countErrors_L = 0;
					
		Sum_R = 0;
		for (int i = 0; i < 20; i++)//Right
    1bc2:	ec 14       	cp	r14, r12
    1bc4:	fd 04       	cpc	r15, r13
    1bc6:	71 f6       	brne	.-100    	; 0x1b64 <main+0x2bc>
				errorFill_R[i] = 0;
			}
			//errorFill_R[i] = 0;
			_delay_ms(500);
		}
		countErrors_R = 0;
    1bc8:	10 92 75 03 	sts	0x0375, r1
    1bcc:	10 92 74 03 	sts	0x0374, r1
		countFill = 1;
    1bd0:	e1 e0       	ldi	r30, 0x01	; 1
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	f0 93 05 02 	sts	0x0205, r31
    1bd8:	e0 93 04 02 	sts	0x0204, r30
		//
		STOP_X = 0;
    1bdc:	10 92 ed 03 	sts	0x03ED, r1
    1be0:	10 92 ec 03 	sts	0x03EC, r1
		STOP_Y = 0;
    1be4:	10 92 eb 03 	sts	0x03EB, r1
    1be8:	10 92 ea 03 	sts	0x03EA, r1
    1bec:	ff ef       	ldi	r31, 0xFF	; 255
    1bee:	21 ee       	ldi	r18, 0xE1	; 225
    1bf0:	84 e0       	ldi	r24, 0x04	; 4
    1bf2:	f1 50       	subi	r31, 0x01	; 1
    1bf4:	20 40       	sbci	r18, 0x00	; 0
    1bf6:	80 40       	sbci	r24, 0x00	; 0
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <main+0x34a>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <main+0x354>
    1bfc:	00 00       	nop
		_delay_ms(200);
		Go_To_Zero_Init();
    1bfe:	0e 94 2a 01 	call	0x254	; 0x254 <Go_To_Zero_Init>
					
		PORTF &= ~(1 << PF7);//Red OFF
    1c02:	8f 98       	cbi	0x11, 7	; 17
		PORTK |= (1 << PK6);// Green ON
    1c04:	f3 01       	movw	r30, r6
    1c06:	80 81       	ld	r24, Z
    1c08:	80 64       	ori	r24, 0x40	; 64
    1c0a:	80 83       	st	Z, r24
			//Lcd4_Clear();
			//Lcd4_Set_Cursor(1,0);
			//Lcd4_Write_String("OUT");
			//_delay_ms(2000);
		//}
	}
    1c0c:	3d cf       	rjmp	.-390    	; 0x1a88 <main+0x1e0>

00001c0e <__subsf3>:
    1c0e:	50 58       	subi	r21, 0x80	; 128

00001c10 <__addsf3>:
    1c10:	bb 27       	eor	r27, r27
    1c12:	aa 27       	eor	r26, r26
    1c14:	0e d0       	rcall	.+28     	; 0x1c32 <__addsf3x>
    1c16:	48 c1       	rjmp	.+656    	; 0x1ea8 <__fp_round>
    1c18:	39 d1       	rcall	.+626    	; 0x1e8c <__fp_pscA>
    1c1a:	30 f0       	brcs	.+12     	; 0x1c28 <__addsf3+0x18>
    1c1c:	3e d1       	rcall	.+636    	; 0x1e9a <__fp_pscB>
    1c1e:	20 f0       	brcs	.+8      	; 0x1c28 <__addsf3+0x18>
    1c20:	31 f4       	brne	.+12     	; 0x1c2e <__addsf3+0x1e>
    1c22:	9f 3f       	cpi	r25, 0xFF	; 255
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <__addsf3+0x1a>
    1c26:	1e f4       	brtc	.+6      	; 0x1c2e <__addsf3+0x1e>
    1c28:	2e c1       	rjmp	.+604    	; 0x1e86 <__fp_nan>
    1c2a:	0e f4       	brtc	.+2      	; 0x1c2e <__addsf3+0x1e>
    1c2c:	e0 95       	com	r30
    1c2e:	e7 fb       	bst	r30, 7
    1c30:	24 c1       	rjmp	.+584    	; 0x1e7a <__fp_inf>

00001c32 <__addsf3x>:
    1c32:	e9 2f       	mov	r30, r25
    1c34:	4a d1       	rcall	.+660    	; 0x1eca <__fp_split3>
    1c36:	80 f3       	brcs	.-32     	; 0x1c18 <__addsf3+0x8>
    1c38:	ba 17       	cp	r27, r26
    1c3a:	62 07       	cpc	r22, r18
    1c3c:	73 07       	cpc	r23, r19
    1c3e:	84 07       	cpc	r24, r20
    1c40:	95 07       	cpc	r25, r21
    1c42:	18 f0       	brcs	.+6      	; 0x1c4a <__addsf3x+0x18>
    1c44:	71 f4       	brne	.+28     	; 0x1c62 <__addsf3x+0x30>
    1c46:	9e f5       	brtc	.+102    	; 0x1cae <__addsf3x+0x7c>
    1c48:	62 c1       	rjmp	.+708    	; 0x1f0e <__fp_zero>
    1c4a:	0e f4       	brtc	.+2      	; 0x1c4e <__addsf3x+0x1c>
    1c4c:	e0 95       	com	r30
    1c4e:	0b 2e       	mov	r0, r27
    1c50:	ba 2f       	mov	r27, r26
    1c52:	a0 2d       	mov	r26, r0
    1c54:	0b 01       	movw	r0, r22
    1c56:	b9 01       	movw	r22, r18
    1c58:	90 01       	movw	r18, r0
    1c5a:	0c 01       	movw	r0, r24
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	a0 01       	movw	r20, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	ff 27       	eor	r31, r31
    1c64:	59 1b       	sub	r21, r25
    1c66:	99 f0       	breq	.+38     	; 0x1c8e <__addsf3x+0x5c>
    1c68:	59 3f       	cpi	r21, 0xF9	; 249
    1c6a:	50 f4       	brcc	.+20     	; 0x1c80 <__addsf3x+0x4e>
    1c6c:	50 3e       	cpi	r21, 0xE0	; 224
    1c6e:	68 f1       	brcs	.+90     	; 0x1cca <__addsf3x+0x98>
    1c70:	1a 16       	cp	r1, r26
    1c72:	f0 40       	sbci	r31, 0x00	; 0
    1c74:	a2 2f       	mov	r26, r18
    1c76:	23 2f       	mov	r18, r19
    1c78:	34 2f       	mov	r19, r20
    1c7a:	44 27       	eor	r20, r20
    1c7c:	58 5f       	subi	r21, 0xF8	; 248
    1c7e:	f3 cf       	rjmp	.-26     	; 0x1c66 <__addsf3x+0x34>
    1c80:	46 95       	lsr	r20
    1c82:	37 95       	ror	r19
    1c84:	27 95       	ror	r18
    1c86:	a7 95       	ror	r26
    1c88:	f0 40       	sbci	r31, 0x00	; 0
    1c8a:	53 95       	inc	r21
    1c8c:	c9 f7       	brne	.-14     	; 0x1c80 <__addsf3x+0x4e>
    1c8e:	7e f4       	brtc	.+30     	; 0x1cae <__addsf3x+0x7c>
    1c90:	1f 16       	cp	r1, r31
    1c92:	ba 0b       	sbc	r27, r26
    1c94:	62 0b       	sbc	r22, r18
    1c96:	73 0b       	sbc	r23, r19
    1c98:	84 0b       	sbc	r24, r20
    1c9a:	ba f0       	brmi	.+46     	; 0x1cca <__addsf3x+0x98>
    1c9c:	91 50       	subi	r25, 0x01	; 1
    1c9e:	a1 f0       	breq	.+40     	; 0x1cc8 <__addsf3x+0x96>
    1ca0:	ff 0f       	add	r31, r31
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	66 1f       	adc	r22, r22
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 1f       	adc	r24, r24
    1caa:	c2 f7       	brpl	.-16     	; 0x1c9c <__addsf3x+0x6a>
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <__addsf3x+0x98>
    1cae:	ba 0f       	add	r27, r26
    1cb0:	62 1f       	adc	r22, r18
    1cb2:	73 1f       	adc	r23, r19
    1cb4:	84 1f       	adc	r24, r20
    1cb6:	48 f4       	brcc	.+18     	; 0x1cca <__addsf3x+0x98>
    1cb8:	87 95       	ror	r24
    1cba:	77 95       	ror	r23
    1cbc:	67 95       	ror	r22
    1cbe:	b7 95       	ror	r27
    1cc0:	f7 95       	ror	r31
    1cc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <__addsf3x+0x96>
    1cc6:	b3 cf       	rjmp	.-154    	; 0x1c2e <__addsf3+0x1e>
    1cc8:	93 95       	inc	r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <__addsf3x+0x9e>
    1cce:	99 27       	eor	r25, r25
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	97 95       	ror	r25
    1cd4:	87 95       	ror	r24
    1cd6:	08 95       	ret

00001cd8 <__divsf3>:
    1cd8:	0c d0       	rcall	.+24     	; 0x1cf2 <__divsf3x>
    1cda:	e6 c0       	rjmp	.+460    	; 0x1ea8 <__fp_round>
    1cdc:	de d0       	rcall	.+444    	; 0x1e9a <__fp_pscB>
    1cde:	40 f0       	brcs	.+16     	; 0x1cf0 <__divsf3+0x18>
    1ce0:	d5 d0       	rcall	.+426    	; 0x1e8c <__fp_pscA>
    1ce2:	30 f0       	brcs	.+12     	; 0x1cf0 <__divsf3+0x18>
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <__divsf3+0x16>
    1ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce8:	19 f0       	breq	.+6      	; 0x1cf0 <__divsf3+0x18>
    1cea:	c7 c0       	rjmp	.+398    	; 0x1e7a <__fp_inf>
    1cec:	51 11       	cpse	r21, r1
    1cee:	10 c1       	rjmp	.+544    	; 0x1f10 <__fp_szero>
    1cf0:	ca c0       	rjmp	.+404    	; 0x1e86 <__fp_nan>

00001cf2 <__divsf3x>:
    1cf2:	eb d0       	rcall	.+470    	; 0x1eca <__fp_split3>
    1cf4:	98 f3       	brcs	.-26     	; 0x1cdc <__divsf3+0x4>

00001cf6 <__divsf3_pse>:
    1cf6:	99 23       	and	r25, r25
    1cf8:	c9 f3       	breq	.-14     	; 0x1cec <__divsf3+0x14>
    1cfa:	55 23       	and	r21, r21
    1cfc:	b1 f3       	breq	.-20     	; 0x1cea <__divsf3+0x12>
    1cfe:	95 1b       	sub	r25, r21
    1d00:	55 0b       	sbc	r21, r21
    1d02:	bb 27       	eor	r27, r27
    1d04:	aa 27       	eor	r26, r26
    1d06:	62 17       	cp	r22, r18
    1d08:	73 07       	cpc	r23, r19
    1d0a:	84 07       	cpc	r24, r20
    1d0c:	38 f0       	brcs	.+14     	; 0x1d1c <__divsf3_pse+0x26>
    1d0e:	9f 5f       	subi	r25, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	44 1f       	adc	r20, r20
    1d18:	aa 1f       	adc	r26, r26
    1d1a:	a9 f3       	breq	.-22     	; 0x1d06 <__divsf3_pse+0x10>
    1d1c:	33 d0       	rcall	.+102    	; 0x1d84 <__divsf3_pse+0x8e>
    1d1e:	0e 2e       	mov	r0, r30
    1d20:	3a f0       	brmi	.+14     	; 0x1d30 <__divsf3_pse+0x3a>
    1d22:	e0 e8       	ldi	r30, 0x80	; 128
    1d24:	30 d0       	rcall	.+96     	; 0x1d86 <__divsf3_pse+0x90>
    1d26:	91 50       	subi	r25, 0x01	; 1
    1d28:	50 40       	sbci	r21, 0x00	; 0
    1d2a:	e6 95       	lsr	r30
    1d2c:	00 1c       	adc	r0, r0
    1d2e:	ca f7       	brpl	.-14     	; 0x1d22 <__divsf3_pse+0x2c>
    1d30:	29 d0       	rcall	.+82     	; 0x1d84 <__divsf3_pse+0x8e>
    1d32:	fe 2f       	mov	r31, r30
    1d34:	27 d0       	rcall	.+78     	; 0x1d84 <__divsf3_pse+0x8e>
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	bb 1f       	adc	r27, r27
    1d3e:	26 17       	cp	r18, r22
    1d40:	37 07       	cpc	r19, r23
    1d42:	48 07       	cpc	r20, r24
    1d44:	ab 07       	cpc	r26, r27
    1d46:	b0 e8       	ldi	r27, 0x80	; 128
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <__divsf3_pse+0x56>
    1d4a:	bb 0b       	sbc	r27, r27
    1d4c:	80 2d       	mov	r24, r0
    1d4e:	bf 01       	movw	r22, r30
    1d50:	ff 27       	eor	r31, r31
    1d52:	93 58       	subi	r25, 0x83	; 131
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	2a f0       	brmi	.+10     	; 0x1d62 <__divsf3_pse+0x6c>
    1d58:	9e 3f       	cpi	r25, 0xFE	; 254
    1d5a:	51 05       	cpc	r21, r1
    1d5c:	68 f0       	brcs	.+26     	; 0x1d78 <__divsf3_pse+0x82>
    1d5e:	8d c0       	rjmp	.+282    	; 0x1e7a <__fp_inf>
    1d60:	d7 c0       	rjmp	.+430    	; 0x1f10 <__fp_szero>
    1d62:	5f 3f       	cpi	r21, 0xFF	; 255
    1d64:	ec f3       	brlt	.-6      	; 0x1d60 <__divsf3_pse+0x6a>
    1d66:	98 3e       	cpi	r25, 0xE8	; 232
    1d68:	dc f3       	brlt	.-10     	; 0x1d60 <__divsf3_pse+0x6a>
    1d6a:	86 95       	lsr	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b7 95       	ror	r27
    1d72:	f7 95       	ror	r31
    1d74:	9f 5f       	subi	r25, 0xFF	; 255
    1d76:	c9 f7       	brne	.-14     	; 0x1d6a <__divsf3_pse+0x74>
    1d78:	88 0f       	add	r24, r24
    1d7a:	91 1d       	adc	r25, r1
    1d7c:	96 95       	lsr	r25
    1d7e:	87 95       	ror	r24
    1d80:	97 f9       	bld	r25, 7
    1d82:	08 95       	ret
    1d84:	e1 e0       	ldi	r30, 0x01	; 1
    1d86:	66 0f       	add	r22, r22
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	62 17       	cp	r22, r18
    1d90:	73 07       	cpc	r23, r19
    1d92:	84 07       	cpc	r24, r20
    1d94:	ba 07       	cpc	r27, r26
    1d96:	20 f0       	brcs	.+8      	; 0x1da0 <__divsf3_pse+0xaa>
    1d98:	62 1b       	sub	r22, r18
    1d9a:	73 0b       	sbc	r23, r19
    1d9c:	84 0b       	sbc	r24, r20
    1d9e:	ba 0b       	sbc	r27, r26
    1da0:	ee 1f       	adc	r30, r30
    1da2:	88 f7       	brcc	.-30     	; 0x1d86 <__divsf3_pse+0x90>
    1da4:	e0 95       	com	r30
    1da6:	08 95       	ret

00001da8 <__fixunssfsi>:
    1da8:	98 d0       	rcall	.+304    	; 0x1eda <__fp_splitA>
    1daa:	88 f0       	brcs	.+34     	; 0x1dce <__fixunssfsi+0x26>
    1dac:	9f 57       	subi	r25, 0x7F	; 127
    1dae:	90 f0       	brcs	.+36     	; 0x1dd4 <__fixunssfsi+0x2c>
    1db0:	b9 2f       	mov	r27, r25
    1db2:	99 27       	eor	r25, r25
    1db4:	b7 51       	subi	r27, 0x17	; 23
    1db6:	a0 f0       	brcs	.+40     	; 0x1de0 <__fixunssfsi+0x38>
    1db8:	d1 f0       	breq	.+52     	; 0x1dee <__fixunssfsi+0x46>
    1dba:	66 0f       	add	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	1a f0       	brmi	.+6      	; 0x1dca <__fixunssfsi+0x22>
    1dc4:	ba 95       	dec	r27
    1dc6:	c9 f7       	brne	.-14     	; 0x1dba <__fixunssfsi+0x12>
    1dc8:	12 c0       	rjmp	.+36     	; 0x1dee <__fixunssfsi+0x46>
    1dca:	b1 30       	cpi	r27, 0x01	; 1
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <__fixunssfsi+0x46>
    1dce:	9f d0       	rcall	.+318    	; 0x1f0e <__fp_zero>
    1dd0:	b1 e0       	ldi	r27, 0x01	; 1
    1dd2:	08 95       	ret
    1dd4:	9c c0       	rjmp	.+312    	; 0x1f0e <__fp_zero>
    1dd6:	67 2f       	mov	r22, r23
    1dd8:	78 2f       	mov	r23, r24
    1dda:	88 27       	eor	r24, r24
    1ddc:	b8 5f       	subi	r27, 0xF8	; 248
    1dde:	39 f0       	breq	.+14     	; 0x1dee <__fixunssfsi+0x46>
    1de0:	b9 3f       	cpi	r27, 0xF9	; 249
    1de2:	cc f3       	brlt	.-14     	; 0x1dd6 <__fixunssfsi+0x2e>
    1de4:	86 95       	lsr	r24
    1de6:	77 95       	ror	r23
    1de8:	67 95       	ror	r22
    1dea:	b3 95       	inc	r27
    1dec:	d9 f7       	brne	.-10     	; 0x1de4 <__fixunssfsi+0x3c>
    1dee:	3e f4       	brtc	.+14     	; 0x1dfe <__fixunssfsi+0x56>
    1df0:	90 95       	com	r25
    1df2:	80 95       	com	r24
    1df4:	70 95       	com	r23
    1df6:	61 95       	neg	r22
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	08 95       	ret

00001e00 <__floatunsisf>:
    1e00:	e8 94       	clt
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <__floatsisf+0x12>

00001e04 <__floatsisf>:
    1e04:	97 fb       	bst	r25, 7
    1e06:	3e f4       	brtc	.+14     	; 0x1e16 <__floatsisf+0x12>
    1e08:	90 95       	com	r25
    1e0a:	80 95       	com	r24
    1e0c:	70 95       	com	r23
    1e0e:	61 95       	neg	r22
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	8f 4f       	sbci	r24, 0xFF	; 255
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	99 23       	and	r25, r25
    1e18:	a9 f0       	breq	.+42     	; 0x1e44 <__floatsisf+0x40>
    1e1a:	f9 2f       	mov	r31, r25
    1e1c:	96 e9       	ldi	r25, 0x96	; 150
    1e1e:	bb 27       	eor	r27, r27
    1e20:	93 95       	inc	r25
    1e22:	f6 95       	lsr	r31
    1e24:	87 95       	ror	r24
    1e26:	77 95       	ror	r23
    1e28:	67 95       	ror	r22
    1e2a:	b7 95       	ror	r27
    1e2c:	f1 11       	cpse	r31, r1
    1e2e:	f8 cf       	rjmp	.-16     	; 0x1e20 <__floatsisf+0x1c>
    1e30:	fa f4       	brpl	.+62     	; 0x1e70 <__floatsisf+0x6c>
    1e32:	bb 0f       	add	r27, r27
    1e34:	11 f4       	brne	.+4      	; 0x1e3a <__floatsisf+0x36>
    1e36:	60 ff       	sbrs	r22, 0
    1e38:	1b c0       	rjmp	.+54     	; 0x1e70 <__floatsisf+0x6c>
    1e3a:	6f 5f       	subi	r22, 0xFF	; 255
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e40:	9f 4f       	sbci	r25, 0xFF	; 255
    1e42:	16 c0       	rjmp	.+44     	; 0x1e70 <__floatsisf+0x6c>
    1e44:	88 23       	and	r24, r24
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <__floatsisf+0x48>
    1e48:	96 e9       	ldi	r25, 0x96	; 150
    1e4a:	11 c0       	rjmp	.+34     	; 0x1e6e <__floatsisf+0x6a>
    1e4c:	77 23       	and	r23, r23
    1e4e:	21 f0       	breq	.+8      	; 0x1e58 <__floatsisf+0x54>
    1e50:	9e e8       	ldi	r25, 0x8E	; 142
    1e52:	87 2f       	mov	r24, r23
    1e54:	76 2f       	mov	r23, r22
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <__floatsisf+0x5e>
    1e58:	66 23       	and	r22, r22
    1e5a:	71 f0       	breq	.+28     	; 0x1e78 <__floatsisf+0x74>
    1e5c:	96 e8       	ldi	r25, 0x86	; 134
    1e5e:	86 2f       	mov	r24, r22
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	2a f0       	brmi	.+10     	; 0x1e70 <__floatsisf+0x6c>
    1e66:	9a 95       	dec	r25
    1e68:	66 0f       	add	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	88 1f       	adc	r24, r24
    1e6e:	da f7       	brpl	.-10     	; 0x1e66 <__floatsisf+0x62>
    1e70:	88 0f       	add	r24, r24
    1e72:	96 95       	lsr	r25
    1e74:	87 95       	ror	r24
    1e76:	97 f9       	bld	r25, 7
    1e78:	08 95       	ret

00001e7a <__fp_inf>:
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	9f 67       	ori	r25, 0x7F	; 127
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	70 e0       	ldi	r23, 0x00	; 0
    1e82:	60 e0       	ldi	r22, 0x00	; 0
    1e84:	08 95       	ret

00001e86 <__fp_nan>:
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	80 ec       	ldi	r24, 0xC0	; 192
    1e8a:	08 95       	ret

00001e8c <__fp_pscA>:
    1e8c:	00 24       	eor	r0, r0
    1e8e:	0a 94       	dec	r0
    1e90:	16 16       	cp	r1, r22
    1e92:	17 06       	cpc	r1, r23
    1e94:	18 06       	cpc	r1, r24
    1e96:	09 06       	cpc	r0, r25
    1e98:	08 95       	ret

00001e9a <__fp_pscB>:
    1e9a:	00 24       	eor	r0, r0
    1e9c:	0a 94       	dec	r0
    1e9e:	12 16       	cp	r1, r18
    1ea0:	13 06       	cpc	r1, r19
    1ea2:	14 06       	cpc	r1, r20
    1ea4:	05 06       	cpc	r0, r21
    1ea6:	08 95       	ret

00001ea8 <__fp_round>:
    1ea8:	09 2e       	mov	r0, r25
    1eaa:	03 94       	inc	r0
    1eac:	00 0c       	add	r0, r0
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <__fp_round+0xc>
    1eb0:	88 23       	and	r24, r24
    1eb2:	52 f0       	brmi	.+20     	; 0x1ec8 <__fp_round+0x20>
    1eb4:	bb 0f       	add	r27, r27
    1eb6:	40 f4       	brcc	.+16     	; 0x1ec8 <__fp_round+0x20>
    1eb8:	bf 2b       	or	r27, r31
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <__fp_round+0x18>
    1ebc:	60 ff       	sbrs	r22, 0
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <__fp_round+0x20>
    1ec0:	6f 5f       	subi	r22, 0xFF	; 255
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	08 95       	ret

00001eca <__fp_split3>:
    1eca:	57 fd       	sbrc	r21, 7
    1ecc:	90 58       	subi	r25, 0x80	; 128
    1ece:	44 0f       	add	r20, r20
    1ed0:	55 1f       	adc	r21, r21
    1ed2:	59 f0       	breq	.+22     	; 0x1eea <__fp_splitA+0x10>
    1ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed6:	71 f0       	breq	.+28     	; 0x1ef4 <__fp_splitA+0x1a>
    1ed8:	47 95       	ror	r20

00001eda <__fp_splitA>:
    1eda:	88 0f       	add	r24, r24
    1edc:	97 fb       	bst	r25, 7
    1ede:	99 1f       	adc	r25, r25
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <__fp_splitA+0x20>
    1ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ee4:	79 f0       	breq	.+30     	; 0x1f04 <__fp_splitA+0x2a>
    1ee6:	87 95       	ror	r24
    1ee8:	08 95       	ret
    1eea:	12 16       	cp	r1, r18
    1eec:	13 06       	cpc	r1, r19
    1eee:	14 06       	cpc	r1, r20
    1ef0:	55 1f       	adc	r21, r21
    1ef2:	f2 cf       	rjmp	.-28     	; 0x1ed8 <__fp_split3+0xe>
    1ef4:	46 95       	lsr	r20
    1ef6:	f1 df       	rcall	.-30     	; 0x1eda <__fp_splitA>
    1ef8:	08 c0       	rjmp	.+16     	; 0x1f0a <__fp_splitA+0x30>
    1efa:	16 16       	cp	r1, r22
    1efc:	17 06       	cpc	r1, r23
    1efe:	18 06       	cpc	r1, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	f1 cf       	rjmp	.-30     	; 0x1ee6 <__fp_splitA+0xc>
    1f04:	86 95       	lsr	r24
    1f06:	71 05       	cpc	r23, r1
    1f08:	61 05       	cpc	r22, r1
    1f0a:	08 94       	sec
    1f0c:	08 95       	ret

00001f0e <__fp_zero>:
    1f0e:	e8 94       	clt

00001f10 <__fp_szero>:
    1f10:	bb 27       	eor	r27, r27
    1f12:	66 27       	eor	r22, r22
    1f14:	77 27       	eor	r23, r23
    1f16:	cb 01       	movw	r24, r22
    1f18:	97 f9       	bld	r25, 7
    1f1a:	08 95       	ret

00001f1c <__mulsf3>:
    1f1c:	0b d0       	rcall	.+22     	; 0x1f34 <__mulsf3x>
    1f1e:	c4 cf       	rjmp	.-120    	; 0x1ea8 <__fp_round>
    1f20:	b5 df       	rcall	.-150    	; 0x1e8c <__fp_pscA>
    1f22:	28 f0       	brcs	.+10     	; 0x1f2e <__mulsf3+0x12>
    1f24:	ba df       	rcall	.-140    	; 0x1e9a <__fp_pscB>
    1f26:	18 f0       	brcs	.+6      	; 0x1f2e <__mulsf3+0x12>
    1f28:	95 23       	and	r25, r21
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__mulsf3+0x12>
    1f2c:	a6 cf       	rjmp	.-180    	; 0x1e7a <__fp_inf>
    1f2e:	ab cf       	rjmp	.-170    	; 0x1e86 <__fp_nan>
    1f30:	11 24       	eor	r1, r1
    1f32:	ee cf       	rjmp	.-36     	; 0x1f10 <__fp_szero>

00001f34 <__mulsf3x>:
    1f34:	ca df       	rcall	.-108    	; 0x1eca <__fp_split3>
    1f36:	a0 f3       	brcs	.-24     	; 0x1f20 <__mulsf3+0x4>

00001f38 <__mulsf3_pse>:
    1f38:	95 9f       	mul	r25, r21
    1f3a:	d1 f3       	breq	.-12     	; 0x1f30 <__mulsf3+0x14>
    1f3c:	95 0f       	add	r25, r21
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	55 1f       	adc	r21, r21
    1f42:	62 9f       	mul	r22, r18
    1f44:	f0 01       	movw	r30, r0
    1f46:	72 9f       	mul	r23, r18
    1f48:	bb 27       	eor	r27, r27
    1f4a:	f0 0d       	add	r31, r0
    1f4c:	b1 1d       	adc	r27, r1
    1f4e:	63 9f       	mul	r22, r19
    1f50:	aa 27       	eor	r26, r26
    1f52:	f0 0d       	add	r31, r0
    1f54:	b1 1d       	adc	r27, r1
    1f56:	aa 1f       	adc	r26, r26
    1f58:	64 9f       	mul	r22, r20
    1f5a:	66 27       	eor	r22, r22
    1f5c:	b0 0d       	add	r27, r0
    1f5e:	a1 1d       	adc	r26, r1
    1f60:	66 1f       	adc	r22, r22
    1f62:	82 9f       	mul	r24, r18
    1f64:	22 27       	eor	r18, r18
    1f66:	b0 0d       	add	r27, r0
    1f68:	a1 1d       	adc	r26, r1
    1f6a:	62 1f       	adc	r22, r18
    1f6c:	73 9f       	mul	r23, r19
    1f6e:	b0 0d       	add	r27, r0
    1f70:	a1 1d       	adc	r26, r1
    1f72:	62 1f       	adc	r22, r18
    1f74:	83 9f       	mul	r24, r19
    1f76:	a0 0d       	add	r26, r0
    1f78:	61 1d       	adc	r22, r1
    1f7a:	22 1f       	adc	r18, r18
    1f7c:	74 9f       	mul	r23, r20
    1f7e:	33 27       	eor	r19, r19
    1f80:	a0 0d       	add	r26, r0
    1f82:	61 1d       	adc	r22, r1
    1f84:	23 1f       	adc	r18, r19
    1f86:	84 9f       	mul	r24, r20
    1f88:	60 0d       	add	r22, r0
    1f8a:	21 1d       	adc	r18, r1
    1f8c:	82 2f       	mov	r24, r18
    1f8e:	76 2f       	mov	r23, r22
    1f90:	6a 2f       	mov	r22, r26
    1f92:	11 24       	eor	r1, r1
    1f94:	9f 57       	subi	r25, 0x7F	; 127
    1f96:	50 40       	sbci	r21, 0x00	; 0
    1f98:	8a f0       	brmi	.+34     	; 0x1fbc <__mulsf3_pse+0x84>
    1f9a:	e1 f0       	breq	.+56     	; 0x1fd4 <__mulsf3_pse+0x9c>
    1f9c:	88 23       	and	r24, r24
    1f9e:	4a f0       	brmi	.+18     	; 0x1fb2 <__mulsf3_pse+0x7a>
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 1f       	adc	r31, r31
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	66 1f       	adc	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	a9 f7       	brne	.-22     	; 0x1f9c <__mulsf3_pse+0x64>
    1fb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1fb4:	51 05       	cpc	r21, r1
    1fb6:	70 f0       	brcs	.+28     	; 0x1fd4 <__mulsf3_pse+0x9c>
    1fb8:	60 cf       	rjmp	.-320    	; 0x1e7a <__fp_inf>
    1fba:	aa cf       	rjmp	.-172    	; 0x1f10 <__fp_szero>
    1fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1fbe:	ec f3       	brlt	.-6      	; 0x1fba <__mulsf3_pse+0x82>
    1fc0:	98 3e       	cpi	r25, 0xE8	; 232
    1fc2:	dc f3       	brlt	.-10     	; 0x1fba <__mulsf3_pse+0x82>
    1fc4:	86 95       	lsr	r24
    1fc6:	77 95       	ror	r23
    1fc8:	67 95       	ror	r22
    1fca:	b7 95       	ror	r27
    1fcc:	f7 95       	ror	r31
    1fce:	e7 95       	ror	r30
    1fd0:	9f 5f       	subi	r25, 0xFF	; 255
    1fd2:	c1 f7       	brne	.-16     	; 0x1fc4 <__mulsf3_pse+0x8c>
    1fd4:	fe 2b       	or	r31, r30
    1fd6:	88 0f       	add	r24, r24
    1fd8:	91 1d       	adc	r25, r1
    1fda:	96 95       	lsr	r25
    1fdc:	87 95       	ror	r24
    1fde:	97 f9       	bld	r25, 7
    1fe0:	08 95       	ret

00001fe2 <__divmodsi4>:
    1fe2:	05 2e       	mov	r0, r21
    1fe4:	97 fb       	bst	r25, 7
    1fe6:	16 f4       	brtc	.+4      	; 0x1fec <__divmodsi4+0xa>
    1fe8:	00 94       	com	r0
    1fea:	0f d0       	rcall	.+30     	; 0x200a <__negsi2>
    1fec:	57 fd       	sbrc	r21, 7
    1fee:	05 d0       	rcall	.+10     	; 0x1ffa <__divmodsi4_neg2>
    1ff0:	14 d0       	rcall	.+40     	; 0x201a <__udivmodsi4>
    1ff2:	07 fc       	sbrc	r0, 7
    1ff4:	02 d0       	rcall	.+4      	; 0x1ffa <__divmodsi4_neg2>
    1ff6:	46 f4       	brtc	.+16     	; 0x2008 <__divmodsi4_exit>
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <__negsi2>

00001ffa <__divmodsi4_neg2>:
    1ffa:	50 95       	com	r21
    1ffc:	40 95       	com	r20
    1ffe:	30 95       	com	r19
    2000:	21 95       	neg	r18
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	4f 4f       	sbci	r20, 0xFF	; 255
    2006:	5f 4f       	sbci	r21, 0xFF	; 255

00002008 <__divmodsi4_exit>:
    2008:	08 95       	ret

0000200a <__negsi2>:
    200a:	90 95       	com	r25
    200c:	80 95       	com	r24
    200e:	70 95       	com	r23
    2010:	61 95       	neg	r22
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	8f 4f       	sbci	r24, 0xFF	; 255
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	08 95       	ret

0000201a <__udivmodsi4>:
    201a:	a1 e2       	ldi	r26, 0x21	; 33
    201c:	1a 2e       	mov	r1, r26
    201e:	aa 1b       	sub	r26, r26
    2020:	bb 1b       	sub	r27, r27
    2022:	fd 01       	movw	r30, r26
    2024:	0d c0       	rjmp	.+26     	; 0x2040 <__udivmodsi4_ep>

00002026 <__udivmodsi4_loop>:
    2026:	aa 1f       	adc	r26, r26
    2028:	bb 1f       	adc	r27, r27
    202a:	ee 1f       	adc	r30, r30
    202c:	ff 1f       	adc	r31, r31
    202e:	a2 17       	cp	r26, r18
    2030:	b3 07       	cpc	r27, r19
    2032:	e4 07       	cpc	r30, r20
    2034:	f5 07       	cpc	r31, r21
    2036:	20 f0       	brcs	.+8      	; 0x2040 <__udivmodsi4_ep>
    2038:	a2 1b       	sub	r26, r18
    203a:	b3 0b       	sbc	r27, r19
    203c:	e4 0b       	sbc	r30, r20
    203e:	f5 0b       	sbc	r31, r21

00002040 <__udivmodsi4_ep>:
    2040:	66 1f       	adc	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	1a 94       	dec	r1
    204a:	69 f7       	brne	.-38     	; 0x2026 <__udivmodsi4_loop>
    204c:	60 95       	com	r22
    204e:	70 95       	com	r23
    2050:	80 95       	com	r24
    2052:	90 95       	com	r25
    2054:	9b 01       	movw	r18, r22
    2056:	ac 01       	movw	r20, r24
    2058:	bd 01       	movw	r22, r26
    205a:	cf 01       	movw	r24, r30
    205c:	08 95       	ret

0000205e <__itoa_ncheck>:
    205e:	bb 27       	eor	r27, r27
    2060:	4a 30       	cpi	r20, 0x0A	; 10
    2062:	31 f4       	brne	.+12     	; 0x2070 <__itoa_ncheck+0x12>
    2064:	99 23       	and	r25, r25
    2066:	22 f4       	brpl	.+8      	; 0x2070 <__itoa_ncheck+0x12>
    2068:	bd e2       	ldi	r27, 0x2D	; 45
    206a:	90 95       	com	r25
    206c:	81 95       	neg	r24
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <__utoa_common>

00002072 <__utoa_ncheck>:
    2072:	bb 27       	eor	r27, r27

00002074 <__utoa_common>:
    2074:	fb 01       	movw	r30, r22
    2076:	55 27       	eor	r21, r21
    2078:	aa 27       	eor	r26, r26
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	aa 1f       	adc	r26, r26
    2080:	a4 17       	cp	r26, r20
    2082:	10 f0       	brcs	.+4      	; 0x2088 <__utoa_common+0x14>
    2084:	a4 1b       	sub	r26, r20
    2086:	83 95       	inc	r24
    2088:	50 51       	subi	r21, 0x10	; 16
    208a:	b9 f7       	brne	.-18     	; 0x207a <__utoa_common+0x6>
    208c:	a0 5d       	subi	r26, 0xD0	; 208
    208e:	aa 33       	cpi	r26, 0x3A	; 58
    2090:	08 f0       	brcs	.+2      	; 0x2094 <__utoa_common+0x20>
    2092:	a9 5d       	subi	r26, 0xD9	; 217
    2094:	a1 93       	st	Z+, r26
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	79 f7       	brne	.-34     	; 0x2078 <__utoa_common+0x4>
    209a:	b1 11       	cpse	r27, r1
    209c:	b1 93       	st	Z+, r27
    209e:	11 92       	st	Z+, r1
    20a0:	cb 01       	movw	r24, r22
    20a2:	00 c0       	rjmp	.+0      	; 0x20a4 <strrev>

000020a4 <strrev>:
    20a4:	dc 01       	movw	r26, r24
    20a6:	fc 01       	movw	r30, r24
    20a8:	67 2f       	mov	r22, r23
    20aa:	71 91       	ld	r23, Z+
    20ac:	77 23       	and	r23, r23
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <strrev+0x4>
    20b0:	32 97       	sbiw	r30, 0x02	; 2
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <strrev+0x18>
    20b4:	7c 91       	ld	r23, X
    20b6:	6d 93       	st	X+, r22
    20b8:	70 83       	st	Z, r23
    20ba:	62 91       	ld	r22, -Z
    20bc:	ae 17       	cp	r26, r30
    20be:	bf 07       	cpc	r27, r31
    20c0:	c8 f3       	brcs	.-14     	; 0x20b4 <strrev+0x10>
    20c2:	08 95       	ret

000020c4 <_exit>:
    20c4:	f8 94       	cli

000020c6 <__stop_program>:
    20c6:	ff cf       	rjmp	.-2      	; 0x20c6 <__stop_program>
